<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="metacall_8h" kind="file" language="C++">
    <compoundname>metacall.h</compoundname>
    <includes local="no">metacall/metacall_api.h</includes>
    <includes refid="metacall__allocator_8h" local="no">metacall/metacall_allocator.h</includes>
    <includes local="no">metacall/metacall_def.h</includes>
    <includes refid="metacall__log_8h" local="no">metacall/metacall_log.h</includes>
    <includes refid="metacall__value_8h" local="no">metacall/metacall_value.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="2">
        <label>metacall/metacall_api.h</label>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>metacall/metacall_def.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>metacall/metacall_log.h</label>
        <link refid="metacall__log_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>metacall/metacall_value.h</label>
        <link refid="metacall__value_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>metacall/metacall_allocator.h</label>
        <link refid="metacall__allocator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>metacall.h</label>
        <link refid="metacall_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmetacall__initialize__configuration__type" prot="public">metacall_initialize_configuration_type</innerclass>
    <innerclass refid="structmetacall__await__callbacks__type" prot="public">metacall_await_callbacks_type</innerclass>
      <sectiondef kind="user-defined">
      <description><para>Get the function by</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function reference, null if the function does not exist </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="metacall_8h_1a137dbf351f620ac5c1daebf1564f099b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_function</definition>
        <argsstring>(const char *name)</argsstring>
        <name>metacall_function</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="462" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="462" declcolumn="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>from @handle</header>
      <description><para>Get the function by</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the handle returned by metacall_load_from_{file, memory, package}</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function reference, null if the function does not exist </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="metacall_8h_1a0733570d83d6daf0e421e3e414547566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_handle_function</definition>
        <argsstring>(void *handle, const char *name)</argsstring>
        <name>metacall_handle_function</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="477" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="477" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a26ff10520ec45fc6dc56e6b731f7cd98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_function_parameter_type</definition>
        <argsstring>(void *func, size_t parameter, enum metacall_value_id *id)</argsstring>
        <name>metacall_function_parameter_type</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>enum <ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the function parameter type id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the function obtained from metacall_function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the parameter to be retrieved</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter type id that will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return 0 if the @parameter index exists and @func is valid, 1 otherwhise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="495" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="495" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a391f6f382c453d8903889a910f59bf4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_function_return_type</definition>
        <argsstring>(void *func, enum metacall_value_id *id)</argsstring>
        <name>metacall_function_return_type</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>enum <ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the function return type id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the function obtained from metacall_function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The value id of the return type of the function @func</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return 0 if the @func is valid, 1 otherwhise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="511" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="511" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ae41ffa4531b7819e7f0d1c580ef508c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API size_t</type>
        <definition>METACALL_API size_t metacall_function_size</definition>
        <argsstring>(void *func)</argsstring>
        <name>metacall_function_size</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Get minimun mumber of arguments accepted by function @func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function reference</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return mumber of arguments </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="523" column="21" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="523" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a42f7b6d24d91f6aa2b1a1bf773a2be3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_function_async</definition>
        <argsstring>(void *func)</argsstring>
        <name>metacall_function_async</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Check if the function @func is asynchronous or synchronous. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function reference</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return 0 if it is syncrhonous, 1 if it is asynchronous and -1 if the function is NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="535" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="535" declcolumn="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>Get the handle by</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension of the script</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the handle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle reference, null if the function does not exist </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="metacall_8h_1a579d699c4407cc27e94d216303f152aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_handle</definition>
        <argsstring>(const char *tag, const char *name)</argsstring>
        <name>metacall_handle</name>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="550" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="550" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1af1a1d52c74b30adba3e328eafb77cf3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const METACALL_API char *</type>
        <definition>const METACALL_API char* metacall_handle_id</definition>
        <argsstring>(void *handle)</argsstring>
        <name>metacall_handle_id</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Get name of a @handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the handle to be retrieved</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String that references the handle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="562" column="25" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="562" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ad69cc4988cf490c58d1c5d72ce7a3f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_handle_export</definition>
        <argsstring>(void *handle)</argsstring>
        <name>metacall_handle_export</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Return a value representing the handle as a map of functions (or values) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the handle to be described</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A value of type map on success, null otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="574" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="574" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a7029ce54bb2a8fb4516415e42d6d986b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfv</definition>
        <argsstring>(void *func, void *args[])</argsstring>
        <name>metacallfv</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Call a function anonymously by value array @args and function @func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="589" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="589" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1afcaf2d96cbe7e899e9f5450be7d7d1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfv_s</definition>
        <argsstring>(void *func, void *args[], size_t size)</argsstring>
        <name>metacallfv_s</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Call a function anonymously by value array @args and function @func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of function arguments</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="607" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="607" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ae523e9a658d5ea11bde72660df84df95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallf</definition>
        <argsstring>(void *func,...)</argsstring>
        <name>metacallf</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Call a function anonymously by variable arguments @va_args and function @func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="619" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="619" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a6de5e0d836963404a27918bfade98cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfs</definition>
        <argsstring>(void *func, const char *buffer, size_t size, void *allocator)</argsstring>
        <name>metacallfs</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Call a function anonymously by function @func and serial @buffer of size @size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>String representing an array to be deserialized into arguments of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of string @buffer</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocator will allocate the value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="640" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="640" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ac1ecf16f1985cecee777d9e84c70d79a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfmv</definition>
        <argsstring>(void *func, void *keys[], void *values[])</argsstring>
        <name>metacallfmv</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>keys</declname>
          <array>[]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>values</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Call a function anonymously by value map (@keys -&gt; @values) and function @func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">keys</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values representing argument keys</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values representing argument values data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="658" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="658" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ae381876c35f6b194c96c19a9b808e313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfms</definition>
        <argsstring>(void *func, const char *buffer, size_t size, void *allocator)</argsstring>
        <name>metacallfms</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Call a function anonymously by function @func and serial @buffer of size @size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>String representing a map to be deserialized into arguments of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of string @buffer</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocator will allocate the value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="679" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="679" declcolumn="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>and arguments @va_args</header>
      <description><para>Register a function by name</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">invoke</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function invoke interface (argc, argv, data)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Will set the pointer to the function if the parameter is not null</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">return_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of return value</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of function arguments</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">va_args</parametername>
</parameternamelist>
<parameterdescription>
<para>Varidic function parameter types</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="metacall_8h_1a810ca74b8efef842df8ea7baf2b87e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_register</definition>
        <argsstring>(const char *name, void *(*invoke)(size_t, void *[], void *), void **func, enum metacall_value_id return_type, size_t size,...)</argsstring>
        <name>metacall_register</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *(*)(size_t, void *[], void *)</type>
          <declname>invoke</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>func</declname>
        </param>
        <param>
          <type>enum <ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref></type>
          <declname>return_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="706" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="706" declcolumn="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>and arguments @types</header>
      <description><para>Register a function by name</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">invoke</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function invoke interface (argc, argv, data)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Will set the pointer to the function if the parameter is not null</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">return_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of return value</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of function arguments</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">types</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameter types</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="metacall_8h_1ae0f575287847cd57f5a549b2b211db1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_registerv</definition>
        <argsstring>(const char *name, void *(*invoke)(size_t, void *[], void *), void **func, enum metacall_value_id return_type, size_t size, enum metacall_value_id types[])</argsstring>
        <name>metacall_registerv</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *(*)(size_t, void *[], void *)</type>
          <declname>invoke</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>func</declname>
        </param>
        <param>
          <type>enum <ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref></type>
          <declname>return_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>enum <ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref></type>
          <declname>types</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="733" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="733" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a52ef2927638d958c6e76555fc49a765b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_await</definition>
        <argsstring>(const char *name, void *args[], void *(*resolve_callback)(void *, void *), void *(*reject_callback)(void *, void *), void *data)</argsstring>
        <name>metacall_await</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>resolve_callback</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>reject_callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Executes an asynchronous call to the function and registers a callback to be executed when a future is resolved (it does block) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to be called asynchronously</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to the values to be passed to the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolve_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* Value representing the result of the future resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* A reference to @data that will be used as a closure for the chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value containing the result of the operation, it will be wrapped into a future later on to be returned by the function</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reject_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task error (signature is identical as resolve_callback)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a context that will act as a closure for the chain</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call returned by @resolve_callback or @reject_callback wrapped in a future </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="764" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="764" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a5f24de215645b2728c80e20685cb5525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_await_future</definition>
        <argsstring>(void *f, void *(*resolve_callback)(void *, void *), void *(*reject_callback)(void *, void *), void *data)</argsstring>
        <name>metacall_await_future</name>
        <param>
          <type>void *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>resolve_callback</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>reject_callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Awaits for a promise and registers a callback to be executed when a future is resolved. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the future</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolve_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* Value representing the result of the future resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* A reference to @data that will be used as a closure for the chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value containing the result of the operation, it will be wrapped into a future later on to be returned by the function</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reject_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task error (signature is identical as resolve_callback)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a context that will act as a closure for the chain</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call returned by @resolve_callback or @reject_callback wrapped in a future </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="792" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="792" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a698f9b1a031af836302d2634e3194f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_await_s</definition>
        <argsstring>(const char *name, void *args[], size_t size, void *(*resolve_callback)(void *, void *), void *(*reject_callback)(void *, void *), void *data)</argsstring>
        <name>metacall_await_s</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>resolve_callback</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>reject_callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Executes an asynchronous call to the function and registers a callback to be executed when a future is resolved (it does block) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to be called asynchronously</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to the values to be passed to the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of the array @args</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolve_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* Value representing the result of the future resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* A reference to @data that will be used as a closure for the chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value containing the result of the operation, it will be wrapped into a future later on to be returned by the function</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reject_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task error (signature is identical as resolve_callback)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a context that will act as a closure for the chain</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call returned by @resolve_callback or @reject_callback wrapped in a future </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="826" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="826" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a4aae2677499d7bc7992840e90d754d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfv_await</definition>
        <argsstring>(void *func, void *args[], void *(*resolve_callback)(void *, void *), void *(*reject_callback)(void *, void *), void *data)</argsstring>
        <name>metacallfv_await</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>resolve_callback</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>reject_callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Call an asynchronous function anonymously by value array @args and function @func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to values</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolve_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* Value representing the result of the future resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* A reference to @data that will be used as a closure for the chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value containing the result of the operation, it will be wrapped into a future later on to be returned by the function</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reject_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task error (signature is identical as resolve_callback)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a context that will act as a closure for the chain</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call returned by @resolve_callback or @reject_callback wrapped in a future </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="857" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="857" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a9c5ead1f1aa559e58a65f69ae51972cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfv_await_s</definition>
        <argsstring>(void *func, void *args[], size_t size, void *(*resolve_callback)(void *, void *), void *(*reject_callback)(void *, void *), void *data)</argsstring>
        <name>metacallfv_await_s</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>resolve_callback</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>reject_callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Call an asynchronous function anonymously by value array @args and function @func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to values</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of the array @args</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolve_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* Value representing the result of the future resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* A reference to @data that will be used as a closure for the chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value containing the result of the operation, it will be wrapped into a future later on to be returned by the function</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reject_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task error (signature is identical as resolve_callback)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a context that will act as a closure for the chain</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call returned by @resolve_callback or @reject_callback wrapped in a future </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="891" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="891" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1afe71978aefb3bb4d664ddf54b5ab81b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfv_await_struct_s</definition>
        <argsstring>(void *func, void *args[], size_t size, metacall_await_callbacks cb, void *data)</argsstring>
        <name>metacallfv_await_struct_s</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>metacall_await_callbacks</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Call an asynchronous function anonymously by value array @args and function @func (offered without function pointers for languages without support to function pointers) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to values</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of the array @args</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct containing the function pointers to reject and resolve that will be executed when task completion or error</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a context that will act as a closure for the chain</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call returned by @resolve_callback or @reject_callback wrapped in a future </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="915" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="915" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a806b1dda95f596de33a9527123fed8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfmv_await</definition>
        <argsstring>(void *func, void *keys[], void *values[], void *(*resolve_callback)(void *, void *), void *(*reject_callback)(void *, void *), void *data)</argsstring>
        <name>metacallfmv_await</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>keys</declname>
          <array>[]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>values</declname>
          <array>[]</array>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>resolve_callback</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>reject_callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Call an asynchronous function anonymously by value map (@keys -&gt; @values) and function @func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">keys</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values representing argument keys</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values representing argument values data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of the arrays @keys and @values</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolve_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* Value representing the result of the future resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* A reference to @data that will be used as a closure for the chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value containing the result of the operation, it will be wrapped into a future later on to be returned by the function</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reject_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task error (signature is identical as resolve_callback)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a context that will act as a closure for the chain</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call returned by @resolve_callback or @reject_callback wrapped in a future </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="952" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="952" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a4c8d0fa0f6b7c3607bd92524a11f3c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfmv_await_s</definition>
        <argsstring>(void *func, void *keys[], void *values[], size_t size, void *(*resolve_callback)(void *, void *), void *(*reject_callback)(void *, void *), void *data)</argsstring>
        <name>metacallfmv_await_s</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>keys</declname>
          <array>[]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>values</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>resolve_callback</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>reject_callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Call an asynchronous function anonymously by value map (@keys -&gt; @values) and function @func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">keys</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values representing argument keys</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values representing argument values data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolve_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* Value representing the result of the future resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* A reference to @data that will be used as a closure for the chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value containing the result of the operation, it will be wrapped into a future later on to be returned by the function</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reject_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task error (signature is identical as resolve_callback)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a context that will act as a closure for the chain</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call returned by @resolve_callback or @reject_callback wrapped in a future </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="986" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="986" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1addd2e38b4966b41bc2473c172d52147d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfs_await</definition>
        <argsstring>(void *func, const char *buffer, size_t size, void *allocator, void *(*resolve_callback)(void *, void *), void *(*reject_callback)(void *, void *), void *data)</argsstring>
        <name>metacallfs_await</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>resolve_callback</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>reject_callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Call an asynchronous function anonymously by function @func and serial @buffer of size @size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>String representing an array to be deserialized into arguments of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of string @buffer</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocator will allocate the value</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolve_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* Value representing the result of the future resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* A reference to @data that will be used as a closure for the chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value containing the result of the operation, it will be wrapped into a future later on to be returned by the function</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reject_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task error (signature is identical as resolve_callback)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a context that will act as a closure for the chain</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call returned by @resolve_callback or @reject_callback wrapped in a future </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1023" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1023" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a6111e7af53fb3dcf04018aa7a06b01e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallfms_await</definition>
        <argsstring>(void *func, const char *buffer, size_t size, void *allocator, void *(*resolve_callback)(void *, void *), void *(*reject_callback)(void *, void *), void *data)</argsstring>
        <name>metacallfms_await</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>resolve_callback</declname>
        </param>
        <param>
          <type>void *(*)(void *, void *)</type>
          <declname>reject_callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Call an asynchronous function anonymously by function @func and serial @buffer of size @size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to function to be called</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>String representing a map to be deserialized into arguments of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of string @buffer</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocator will allocate the value</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolve_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* Value representing the result of the future resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para>* A reference to @data that will be used as a closure for the chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value containing the result of the operation, it will be wrapped into a future later on to be returned by the function</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reject_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to function that will be executed when task error (signature is identical as resolve_callback)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a context that will act as a closure for the chain</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call returned by @resolve_callback or @reject_callback wrapped in a future </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1060" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1060" declcolumn="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para>Get the class by</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the class</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Class reference, null if the class does not exist </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="metacall_8h_1a62422ba9010c261547585dc014f5f71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_class</definition>
        <argsstring>(const char *name)</argsstring>
        <name>metacall_class</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1072" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1072" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a97f50d305c683edfbeec022d41d8b749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallv_class</definition>
        <argsstring>(void *cls, const char *name, void *args[], size_t size)</argsstring>
        <name>metacallv_class</name>
        <param>
          <type>void *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Call a class method anonymously by value array @args (this procedure assumes there&apos;s no overloaded methods and does type conversion on values) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cls</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the class</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the method</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of args array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1093" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1093" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ac0e15e8ca121a9b0c5b1f22f760d7137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallt_class</definition>
        <argsstring>(void *cls, const char *name, const enum metacall_value_id ret, void *args[], size_t size)</argsstring>
        <name>metacallt_class</name>
        <param>
          <type>void *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const enum <ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref></type>
          <declname>ret</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Call a class method anonymously by value array @args and return value type @ret (helps to resolve overloading methods) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cls</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the class</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the method</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the return value of the method</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of args array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1117" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1117" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1aee922f6a17e2d304c8074342779205c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_class_new</definition>
        <argsstring>(void *cls, const char *name, void *args[], size_t size)</argsstring>
        <name>metacall_class_new</name>
        <param>
          <type>void *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create a new object instance from @cls by value array @args. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cls</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the class</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the new object</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers constructor parameters</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of constructor parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the new object value instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1138" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1138" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a70337e2f826dab637d640337404831cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_class_static_get</definition>
        <argsstring>(void *cls, const char *key)</argsstring>
        <name>metacall_class_static_get</name>
        <param>
          <type>void *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get an attribute from @cls by @key name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cls</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the class</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the attribute to get</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the class attribute value or NULL if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1153" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1153" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ad69032d3eec3834b36d907141f32332a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_class_static_set</definition>
        <argsstring>(void *cls, const char *key, void *v)</argsstring>
        <name>metacall_class_static_set</name>
        <param>
          <type>void *</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Set an attribute to @cls by @key name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cls</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the class</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the attribute to set</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero integer if an error ocurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1171" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1171" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a1b346165cc3e9d4c958bf92c65f71ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallv_object</definition>
        <argsstring>(void *obj, const char *name, void *args[], size_t size)</argsstring>
        <name>metacallv_object</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Call an object method anonymously by value array @args. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the object</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the method</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of args array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1192" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1192" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a1391d4d2e8f9dc919ecb6ce5ac00916f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallt_object</definition>
        <argsstring>(void *obj, const char *name, const enum metacall_value_id ret, void *args[], size_t size)</argsstring>
        <name>metacallt_object</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const enum <ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref></type>
          <declname>ret</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Call a object method anonymously by value array @args and return value type @ret (helps to resolve overloading methods) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the object</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the method</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the return value of the method</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of args array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1216" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1216" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1abf765af19df6abca9ef981ed56db6b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_object_get</definition>
        <argsstring>(void *obj, const char *key)</argsstring>
        <name>metacall_object_get</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get an attribute from @obj by @key name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the object</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the attribute to get</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the object attribute value or NULL if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1231" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1231" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a567cbdd3c398e4bcfab8e07ff76de06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_object_set</definition>
        <argsstring>(void *obj, const char *key, void *v)</argsstring>
        <name>metacall_object_set</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Set an attribute to @obj by @key name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the object</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the attribute to set</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero integer if an error ocurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1249" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1249" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ab9d6a8fa4d186f14741ef15015798eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API char *</type>
        <definition>METACALL_API char* metacall_inspect</definition>
        <argsstring>(size_t *size, void *allocator)</argsstring>
        <name>metacall_inspect</name>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Provide information about all loaded objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of return buffer</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocator will allocate the string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String containing introspection information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1264" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1264" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1acdcbeeeafdc83e9b69937265a0da53c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API char *</type>
        <definition>METACALL_API char* metacall_serialize</definition>
        <argsstring>(const char *name, void *v, size_t *size, void *allocator)</argsstring>
        <name>metacall_serialize</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Convert the value @v to serialized string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the serial to be used</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the value</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of new allocated string</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocator will allocate the string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New allocated string containing stringified value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1285" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1285" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a0d45c99a4491e8bbad9d66aa8e719e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_deserialize</definition>
        <argsstring>(const char *name, const char *buffer, size_t size, void *allocator)</argsstring>
        <name>metacall_deserialize</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Convert the string @buffer to value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the serial to be used</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>String to be deserialized</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of string @buffer</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocator will allocate the value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New allocated value representing the string (must be freed) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1306" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1306" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ae1f35c9c5cd2b375e8fb00b9d8c5890c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_clear</definition>
        <argsstring>(void *handle)</argsstring>
        <name>metacall_clear</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Clear handle from memory and unload related resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the handle to be unloaded</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1318" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1318" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1aca8745a9f261bc3d37ee9156b991296f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_destroy</definition>
        <argsstring>(void)</argsstring>
        <name>metacall_destroy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Destroy MetaCall library. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1327" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1327" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a1e8b06591a5564cfa4f1209e84ad5e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const METACALL_API char *</type>
        <definition>const METACALL_API char* metacall_print_info</definition>
        <argsstring>(void)</argsstring>
        <name>metacall_print_info</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Provide the module information. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Static string containing module information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="1336" column="25" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="1336" declcolumn="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="metacall_8h_1a9c8f9f1a02aa8b7f11203f473ad45a0c" prot="public" static="no">
        <name>METACALL_FLAGS_FORK_SAFE</name>
        <initializer>0x01 &lt;&lt; 0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="48" column="9" bodyfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="metacall_8h_1aa9b6fcb756e3ac95f638f4a42bb8f5d4" prot="public" static="no">
        <type>void *(*</type>
        <definition>typedef void*(* metacall_await_callback) (void *, void *)</definition>
        <argsstring>)(void *, void *)</argsstring>
        <name>metacall_await_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="64" column="9" bodyfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="metacall_8h_1ad50602b5115964e06b18483807ba1e11" prot="public" static="no" mutable="no">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall_null_args[1]</definition>
        <argsstring>[1]</argsstring>
        <name>metacall_null_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="75" column="26" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="75" declcolumn="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="metacall_8h_1a4aa530f2d57ee74faec5152ab59cfd2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const METACALL_API char *</type>
        <definition>const METACALL_API char* metacall_serial</definition>
        <argsstring>(void)</argsstring>
        <name>metacall_serial</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns default serializer used by MetaCall. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Name of the serializer to be used with serialization methods </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="86" column="25" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="86" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a7359cf8608ee329433d129f74621f6b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void</type>
        <definition>METACALL_API void metacall_log_null</definition>
        <argsstring>(void)</argsstring>
        <name>metacall_log_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disables MetaCall logs, must be called before @metacall_initialize. </para>
        </briefdescription>
        <detaileddescription>
<para>When initializing MetaCall, it initializes a default logs to stdout if none was defined. If you want to benchmark or simply disable this default logs, you can call to this function before @metacall_initialize. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="96" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="96" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a59ae3eea97bc40256b292aea7f36b61c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void</type>
        <definition>METACALL_API void metacall_flags</definition>
        <argsstring>(int flags)</argsstring>
        <name>metacall_flags</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Flags to be set in MetaCall library. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Combination of flags referring to definitions METACALL_FLAGS_* </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="105" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="105" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1aef066c5638c4e049288d98911e1a799f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>metacall_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize MetaCall library. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="114" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="114" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a9c70099ab9944bc953ff0998fa92f97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_initialize_ex</definition>
        <argsstring>(struct metacall_initialize_configuration_type initialize_config[])</argsstring>
        <name>metacall_initialize_ex</name>
        <param>
          <type>struct <ref refid="structmetacall__initialize__configuration__type" kindref="compound">metacall_initialize_configuration_type</ref></type>
          <declname>initialize_config</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Initialize MetaCall library with configuration arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">initialize_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension of the script to be loaded in memory with data to be injected</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="126" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="126" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ab2759ffd9206401b14fb75d53bf35987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void</type>
        <definition>METACALL_API void metacall_initialize_args</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>metacall_initialize_args</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Initialize MetaCall application arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of additional parameters to be passed to the runtime when initializing</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters to be passed to the runtime when initializing (when using MetaCall as an application) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="138" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="138" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1acadaee23ccbd4d29087d617b07e1a346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_argc</definition>
        <argsstring>()</argsstring>
        <name>metacall_argc</name>
        <briefdescription>
<para>Get the number of arguments in which MetaCall was initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An integer equal or greater than zero </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="147" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="147" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a9c0bd7df095d9a4db05204f04fa657a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API char **</type>
        <definition>METACALL_API char** metacall_argv</definition>
        <argsstring>(void)</argsstring>
        <name>metacall_argv</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the arguments in which MetaCall was initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to an array of strings with the additional arguments </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="156" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="156" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a6e9924c55b771ae7f80d6b153ad412d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_is_initialized</definition>
        <argsstring>(const char *tag)</argsstring>
        <name>metacall_is_initialized</name>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Check if script context is loaded by @tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension of the script</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if context is initialized, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="168" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="168" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1af773258f002ae5ea241b945ae4315d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API size_t</type>
        <definition>METACALL_API size_t metacall_args_size</definition>
        <argsstring>(void)</argsstring>
        <name>metacall_args_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Amount of function call arguments supported by MetaCall. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of arguments suported </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="177" column="21" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="177" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a14bbd56502b7bdd53fdbe42b46aceb16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_execution_path</definition>
        <argsstring>(const char *tag, const char *path)</argsstring>
        <name>metacall_execution_path</name>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Set a execution path defined by @path to the extension script @tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension of the script</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to be loaded</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="192" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="192" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ab6fd858391d840206fe14725c2b695e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_execution_path_s</definition>
        <argsstring>(const char *tag, size_t tag_length, const char *path, size_t path_length)</argsstring>
        <name>metacall_execution_path_s</name>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tag_length</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>path_length</declname>
        </param>
        <briefdescription>
<para>Set a execution path defined by @path to the extension script @tag with length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension of the script</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the extension of the tag</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to be loaded</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the path</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="213" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="213" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a4cf8160c6bdd7c5c2614b40be31ce887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_load_from_file</definition>
        <argsstring>(const char *tag, const char *paths[], size_t size, void **handle)</argsstring>
        <name>metacall_load_from_file</name>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>paths</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Loads a script from file specified by @path. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension of the script</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">paths</parametername>
</parameternamelist>
<parameterdescription>
<para>Path array of files</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array @paths</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to reference of loaded handle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="234" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="234" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1aa202ac4aeb04129ab475099af696b7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_load_from_memory</definition>
        <argsstring>(const char *tag, const char *buffer, size_t size, void **handle)</argsstring>
        <name>metacall_load_from_memory</name>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Loads a script from memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension of the script</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory block representing the string of the script</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory block representing the string of the script</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to reference of loaded handle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="255" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="255" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ae62d509141fe85874f1865f61b4075af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_load_from_package</definition>
        <argsstring>(const char *tag, const char *path, void **handle)</argsstring>
        <name>metacall_load_from_package</name>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Loads a package of scrips from file specified by @path into loader defined by @extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension of the script</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the package</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to reference of loaded handle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="273" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="273" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a00a0cad16a66aaaab0f2e523ee390be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_load_from_configuration</definition>
        <argsstring>(const char *path, void **handle, void *allocator)</argsstring>
        <name>metacall_load_from_configuration</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Loads a a list of scrips from configuration specified by @path into loader with the following format: { &quot;language_id&quot;: &quot;&lt;tag&gt;&quot;, &quot;path&quot;: &quot;&lt;path&gt;&quot;, &quot;scripts&quot;: [ &quot;&lt;script0&gt;&quot;, &quot;&lt;script1&gt;&quot;, ..., &quot;&lt;scriptN&gt;&quot; ] }. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the configuration</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to reference of loaded handle</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocator will allocate the configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="297" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="297" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1afc2c0d0a24b9f6e4908bbac36d98954b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallv</definition>
        <argsstring>(const char *name, void *args[])</argsstring>
        <name>metacallv</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Call a function anonymously by value array @args. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="312" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="312" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1ad934b33c0c04c424d7080735d86a240c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallv_s</definition>
        <argsstring>(const char *name, void *args[], size_t size)</argsstring>
        <name>metacallv_s</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Call a function anonymously by value array @args. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of the call</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="330" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="330" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1abaa8b58b55e753ebcb2c6ca7221261fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallhv</definition>
        <argsstring>(void *handle, const char *name, void *args[])</argsstring>
        <name>metacallhv</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Call a function anonymously by handle @handle value array @args This function allows to avoid name collisions when calling functions by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle where the function belongs</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="349" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="349" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a0973f34ae8081817abbcc84e54b09fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallhv_s</definition>
        <argsstring>(void *handle, const char *name, void *args[], size_t size)</argsstring>
        <name>metacallhv_s</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Call a function anonymously by handle @handle value array @args This function allows to avoid name collisions when calling functions by name Includes @size in order to allow variadic arguments or safe calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle where the function belongs</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of the call</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="372" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="372" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a927b07b0d76019322c9a84a768333be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacall</definition>
        <argsstring>(const char *name,...)</argsstring>
        <name>metacall</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Call a function anonymously by variable arguments @va_args. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">va_args</parametername>
</parameternamelist>
<parameterdescription>
<para>Varidic function parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="387" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="387" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a3d6052ad320dd2bb83d6c39d7bac3a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallt</definition>
        <argsstring>(const char *name, const enum metacall_value_id ids[],...)</argsstring>
        <name>metacallt</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const enum <ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref></type>
          <declname>ids</declname>
          <array>[]</array>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Call a function anonymously by type array @ids and variable arguments @va_args. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of types refered to @va_args</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">va_args</parametername>
</parameternamelist>
<parameterdescription>
<para>Varidic function parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="405" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="405" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a93e003693bcf043424e5bd77255ef629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallt_s</definition>
        <argsstring>(const char *name, const enum metacall_value_id ids[], size_t size,...)</argsstring>
        <name>metacallt_s</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const enum <ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref></type>
          <declname>ids</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Call a function anonymously by type array @ids and variable arguments @va_args. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of types refered to @va_args</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of the call</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">va_args</parametername>
</parameternamelist>
<parameterdescription>
<para>Varidic function parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="426" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="426" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall_8h_1a020d72d3ec5fac1ef707e57e356ef0ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void *</type>
        <definition>METACALL_API void* metacallht_s</definition>
        <argsstring>(void *handle, const char *name, const enum metacall_value_id ids[], size_t size,...)</argsstring>
        <name>metacallht_s</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const enum <ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref></type>
          <declname>ids</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Call a function anonymously by type array @ids and variable arguments @va_args. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the handle returned by metacall_load_from_{file, memory, package}</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of types refered to @va_args</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of the call</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">va_args</parametername>
</parameternamelist>
<parameterdescription>
<para>Varidic function parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value containing the result of the call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" line="450" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h" declline="450" declcolumn="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>MetaCall<sp/>Library<sp/>by<sp/>Parra<sp/>Studios</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>library<sp/>for<sp/>providing<sp/>a<sp/>foreign<sp/>function<sp/>interface<sp/>calls.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2016<sp/>-<sp/>2021<sp/>Vicente<sp/>Eduardo<sp/>Ferrer<sp/>Garcia<sp/>&lt;vic798@gmail.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>METACALL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>METACALL_H<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Headers<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;metacall/metacall_api.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="metacall__allocator_8h" kindref="compound">metacall/metacall_allocator.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;metacall/metacall_def.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="metacall__log_8h" kindref="compound">metacall/metacall_log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="metacall__value_8h" kindref="compound">metacall/metacall_value.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>METACALL_FORK_SAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;<ref refid="metacall__fork_8h" kindref="compound">metacall/metacall_fork.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>METACALL_FORK_SAFE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Headers<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Definitions<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="metacall_8h_1a9c8f9f1a02aa8b7f11203f473ad45a0c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>METACALL_FLAGS_FORK_SAFE<sp/>0x01<sp/>&lt;&lt;<sp/>0x00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Forward<sp/>Declarations<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmetacall__initialize__configuration__type" kindref="compound">metacall_initialize_configuration_type</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Type<sp/>Definitions<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structmetacall__initialize__configuration__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmetacall__initialize__configuration__type" kindref="compound">metacall_initialize_configuration_type</ref></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58" refid="structmetacall__initialize__configuration__type_1a680492994486c2bf741d104c3a05a4f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structmetacall__initialize__configuration__type_1a680492994486c2bf741d104c3a05a4f1" kindref="member">tag</ref>;</highlight></codeline>
<codeline lineno="59" refid="structmetacall__initialize__configuration__type_1a9a1547a3170d9ae70f300f0488e8bae0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structmetacall__initialize__configuration__type_1a9a1547a3170d9ae70f300f0488e8bae0" kindref="member">options</ref>;<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>We<sp/>should<sp/>use<sp/>a<sp/>MetaCall<sp/>value<sp/>MAP<sp/>here<sp/>and<sp/>merge<sp/>it<sp/>with<sp/>the<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>this<sp/>way<sp/>loaders<sp/>will<sp/>be<sp/>able<sp/>to<sp/>access<sp/>this<sp/>information<sp/>in<sp/>the<sp/>backend<sp/>and<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>use<sp/>a<sp/>weak<sp/>API<sp/>in<sp/>order<sp/>to<sp/>implement<sp/>this<sp/>successfully</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="metacall_8h_1aa9b6fcb756e3ac95f638f4a42bb8f5d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*metacall_await_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structmetacall__await__callbacks__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmetacall__await__callbacks__type" kindref="compound">metacall_await_callbacks_type</ref></highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68" refid="structmetacall__await__callbacks__type_1ae99599c2bf0ed9c286a257bd82dffb6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="metacall_8h_1aa9b6fcb756e3ac95f638f4a42bb8f5d4" kindref="member">metacall_await_callback</ref><sp/><ref refid="structmetacall__await__callbacks__type_1ae99599c2bf0ed9c286a257bd82dffb6e" kindref="member">resolve</ref>;</highlight></codeline>
<codeline lineno="69" refid="structmetacall__await__callbacks__type_1a7caf6414e572e35463704b55ea944f2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="metacall_8h_1aa9b6fcb756e3ac95f638f4a42bb8f5d4" kindref="member">metacall_await_callback</ref><sp/><ref refid="structmetacall__await__callbacks__type_1a7caf6414e572e35463704b55ea944f2e" kindref="member">reject</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}<sp/>metacall_await_callbacks;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Global<sp/>Variables<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1ad50602b5115964e06b18483807ba1e11" kindref="member">metacall_null_args</ref>[1];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Methods<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="80"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="81"><highlight class="comment">*<sp/><sp/><sp/><sp/>Returns<sp/>default<sp/>serializer<sp/>used<sp/>by<sp/>MetaCall</highlight></codeline>
<codeline lineno="82"><highlight class="comment">*</highlight></codeline>
<codeline lineno="83"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="84"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>serializer<sp/>to<sp/>be<sp/>used<sp/>with<sp/>serialization<sp/>methods</highlight></codeline>
<codeline lineno="85"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a4aa530f2d57ee74faec5152ab59cfd2c" kindref="member">metacall_serial</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="89"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="90"><highlight class="comment">*<sp/><sp/><sp/><sp/>Disables<sp/>MetaCall<sp/>logs,<sp/>must<sp/>be<sp/>called<sp/>before<sp/>@metacall_initialize.</highlight></codeline>
<codeline lineno="91"><highlight class="comment">*</highlight></codeline>
<codeline lineno="92"><highlight class="comment">*<sp/><sp/><sp/>When<sp/>initializing<sp/>MetaCall,<sp/>it<sp/>initializes<sp/>a<sp/>default<sp/>logs<sp/>to<sp/>stdout</highlight></codeline>
<codeline lineno="93"><highlight class="comment">*<sp/><sp/><sp/>if<sp/>none<sp/>was<sp/>defined.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>benchmark<sp/>or<sp/>simply<sp/>disable<sp/>this</highlight></codeline>
<codeline lineno="94"><highlight class="comment">*<sp/><sp/><sp/>default<sp/>logs,<sp/>you<sp/>can<sp/>call<sp/>to<sp/>this<sp/>function<sp/>before<sp/>@metacall_initialize.</highlight></codeline>
<codeline lineno="95"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a7359cf8608ee329433d129f74621f6b7" kindref="member">metacall_log_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="99"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="100"><highlight class="comment">*<sp/><sp/><sp/><sp/>Flags<sp/>to<sp/>be<sp/>set<sp/>in<sp/>MetaCall<sp/>library</highlight></codeline>
<codeline lineno="101"><highlight class="comment">*</highlight></codeline>
<codeline lineno="102"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>flags</highlight></codeline>
<codeline lineno="103"><highlight class="comment">*<sp/><sp/><sp/><sp/>Combination<sp/>of<sp/>flags<sp/>referring<sp/>to<sp/>definitions<sp/>METACALL_FLAGS_*</highlight></codeline>
<codeline lineno="104"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a59ae3eea97bc40256b292aea7f36b61c" kindref="member">metacall_flags</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="108"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="109"><highlight class="comment">*<sp/><sp/><sp/><sp/>Initialize<sp/>MetaCall<sp/>library</highlight></codeline>
<codeline lineno="110"><highlight class="comment">*</highlight></codeline>
<codeline lineno="111"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="112"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="113"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1aef066c5638c4e049288d98911e1a799f" kindref="member">metacall_initialize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="117"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="118"><highlight class="comment">*<sp/><sp/><sp/><sp/>Initialize<sp/>MetaCall<sp/>library<sp/>with<sp/>configuration<sp/>arguments</highlight></codeline>
<codeline lineno="119"><highlight class="comment">*</highlight></codeline>
<codeline lineno="120"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>initialize_config</highlight></codeline>
<codeline lineno="121"><highlight class="comment">*<sp/><sp/><sp/><sp/>Extension<sp/>of<sp/>the<sp/>script<sp/>to<sp/>be<sp/>loaded<sp/>in<sp/>memory<sp/>with<sp/>data<sp/>to<sp/>be<sp/>injected</highlight></codeline>
<codeline lineno="122"><highlight class="comment">*</highlight></codeline>
<codeline lineno="123"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="124"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="125"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a9c70099ab9944bc953ff0998fa92f97e" kindref="member">metacall_initialize_ex</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmetacall__initialize__configuration__type" kindref="compound">metacall_initialize_configuration_type</ref><sp/>initialize_config[]);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="129"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="130"><highlight class="comment">*<sp/><sp/><sp/><sp/>Initialize<sp/>MetaCall<sp/>application<sp/>arguments</highlight></codeline>
<codeline lineno="131"><highlight class="comment">*</highlight></codeline>
<codeline lineno="132"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>argc</highlight></codeline>
<codeline lineno="133"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>additional<sp/>parameters<sp/>to<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>runtime<sp/>when<sp/>initializing</highlight></codeline>
<codeline lineno="134"><highlight class="comment">*</highlight></codeline>
<codeline lineno="135"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>argv</highlight></codeline>
<codeline lineno="136"><highlight class="comment">*<sp/><sp/><sp/><sp/>Additional<sp/>parameters<sp/>to<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>runtime<sp/>when<sp/>initializing<sp/>(when<sp/>using<sp/>MetaCall<sp/>as<sp/>an<sp/>application)</highlight></codeline>
<codeline lineno="137"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1ab2759ffd9206401b14fb75d53bf35987" kindref="member">metacall_initialize_args</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="141"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="142"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>the<sp/>number<sp/>of<sp/>arguments<sp/>in<sp/>which<sp/>MetaCall<sp/>was<sp/>initialized</highlight></codeline>
<codeline lineno="143"><highlight class="comment">*</highlight></codeline>
<codeline lineno="144"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="145"><highlight class="comment">*<sp/><sp/><sp/><sp/>An<sp/>integer<sp/>equal<sp/>or<sp/>greater<sp/>than<sp/>zero</highlight></codeline>
<codeline lineno="146"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1acadaee23ccbd4d29087d617b07e1a346" kindref="member">metacall_argc</ref>();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="150"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="151"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>the<sp/>arguments<sp/>in<sp/>which<sp/>MetaCall<sp/>was<sp/>initialized</highlight></codeline>
<codeline lineno="152"><highlight class="comment">*</highlight></codeline>
<codeline lineno="153"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="154"><highlight class="comment">*<sp/><sp/><sp/><sp/>A<sp/>pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>strings<sp/>with<sp/>the<sp/>additional<sp/>arguments</highlight></codeline>
<codeline lineno="155"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="metacall_8h_1a9c0bd7df095d9a4db05204f04fa657a3" kindref="member">metacall_argv</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="159"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="160"><highlight class="comment">*<sp/><sp/><sp/><sp/>Check<sp/>if<sp/>script<sp/>context<sp/>is<sp/>loaded<sp/>by<sp/>@tag</highlight></codeline>
<codeline lineno="161"><highlight class="comment">*</highlight></codeline>
<codeline lineno="162"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>tag</highlight></codeline>
<codeline lineno="163"><highlight class="comment">*<sp/><sp/><sp/><sp/>Extension<sp/>of<sp/>the<sp/>script</highlight></codeline>
<codeline lineno="164"><highlight class="comment">*</highlight></codeline>
<codeline lineno="165"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="166"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>context<sp/>is<sp/>initialized,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="167"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a6e9924c55b771ae7f80d6b153ad412d3" kindref="member">metacall_is_initialized</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tag);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="171"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="172"><highlight class="comment">*<sp/><sp/><sp/><sp/>Amount<sp/>of<sp/>function<sp/>call<sp/>arguments<sp/>supported<sp/>by<sp/>MetaCall</highlight></codeline>
<codeline lineno="173"><highlight class="comment">*</highlight></codeline>
<codeline lineno="174"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="175"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>arguments<sp/>suported</highlight></codeline>
<codeline lineno="176"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1af773258f002ae5ea241b945ae4315d49" kindref="member">metacall_args_size</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="180"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="181"><highlight class="comment">*<sp/><sp/><sp/><sp/>Set<sp/>a<sp/>execution<sp/>path<sp/>defined<sp/>by<sp/>@path<sp/>to<sp/>the<sp/>extension<sp/>script<sp/>@tag</highlight></codeline>
<codeline lineno="182"><highlight class="comment">*</highlight></codeline>
<codeline lineno="183"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>tag</highlight></codeline>
<codeline lineno="184"><highlight class="comment">*<sp/><sp/><sp/><sp/>Extension<sp/>of<sp/>the<sp/>script</highlight></codeline>
<codeline lineno="185"><highlight class="comment">*</highlight></codeline>
<codeline lineno="186"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>path</highlight></codeline>
<codeline lineno="187"><highlight class="comment">*<sp/><sp/><sp/><sp/>Path<sp/>to<sp/>be<sp/>loaded</highlight></codeline>
<codeline lineno="188"><highlight class="comment">*</highlight></codeline>
<codeline lineno="189"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="190"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="191"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a14bbd56502b7bdd53fdbe42b46aceb16" kindref="member">metacall_execution_path</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="194"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="195"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="196"><highlight class="comment">*<sp/><sp/><sp/><sp/>Set<sp/>a<sp/>execution<sp/>path<sp/>defined<sp/>by<sp/>@path<sp/>to<sp/>the<sp/>extension<sp/>script<sp/>@tag<sp/>with<sp/>length</highlight></codeline>
<codeline lineno="197"><highlight class="comment">*</highlight></codeline>
<codeline lineno="198"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>tag</highlight></codeline>
<codeline lineno="199"><highlight class="comment">*<sp/><sp/><sp/><sp/>Extension<sp/>of<sp/>the<sp/>script</highlight></codeline>
<codeline lineno="200"><highlight class="comment">*</highlight></codeline>
<codeline lineno="201"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>tag_length</highlight></codeline>
<codeline lineno="202"><highlight class="comment">*<sp/><sp/><sp/><sp/>Length<sp/>of<sp/>the<sp/>extension<sp/>of<sp/>the<sp/>tag</highlight></codeline>
<codeline lineno="203"><highlight class="comment">*</highlight></codeline>
<codeline lineno="204"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>path</highlight></codeline>
<codeline lineno="205"><highlight class="comment">*<sp/><sp/><sp/><sp/>Path<sp/>to<sp/>be<sp/>loaded</highlight></codeline>
<codeline lineno="206"><highlight class="comment">*</highlight></codeline>
<codeline lineno="207"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>path_length</highlight></codeline>
<codeline lineno="208"><highlight class="comment">*<sp/><sp/><sp/><sp/>Length<sp/>of<sp/>the<sp/>path</highlight></codeline>
<codeline lineno="209"><highlight class="comment">*</highlight></codeline>
<codeline lineno="210"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="211"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="212"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1ab6fd858391d840206fe14725c2b695e2" kindref="member">metacall_execution_path_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tag,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tag_length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>path_length);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="216"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="217"><highlight class="comment">*<sp/><sp/><sp/><sp/>Loads<sp/>a<sp/>script<sp/>from<sp/>file<sp/>specified<sp/>by<sp/>@path</highlight></codeline>
<codeline lineno="218"><highlight class="comment">*</highlight></codeline>
<codeline lineno="219"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>tag</highlight></codeline>
<codeline lineno="220"><highlight class="comment">*<sp/><sp/><sp/><sp/>Extension<sp/>of<sp/>the<sp/>script</highlight></codeline>
<codeline lineno="221"><highlight class="comment">*</highlight></codeline>
<codeline lineno="222"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>paths</highlight></codeline>
<codeline lineno="223"><highlight class="comment">*<sp/><sp/><sp/><sp/>Path<sp/>array<sp/>of<sp/>files</highlight></codeline>
<codeline lineno="224"><highlight class="comment">*</highlight></codeline>
<codeline lineno="225"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="226"><highlight class="comment">*<sp/><sp/><sp/><sp/>Size<sp/>of<sp/>the<sp/>array<sp/>@paths</highlight></codeline>
<codeline lineno="227"><highlight class="comment">*</highlight></codeline>
<codeline lineno="228"><highlight class="comment">*<sp/><sp/>@param[out]<sp/>handle</highlight></codeline>
<codeline lineno="229"><highlight class="comment">*<sp/><sp/><sp/><sp/>Optional<sp/>pointer<sp/>to<sp/>reference<sp/>of<sp/>loaded<sp/>handle</highlight></codeline>
<codeline lineno="230"><highlight class="comment">*</highlight></codeline>
<codeline lineno="231"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="232"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="233"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a4cf8160c6bdd7c5c2614b40be31ce887" kindref="member">metacall_load_from_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*paths[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**handle);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="237"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="238"><highlight class="comment">*<sp/><sp/><sp/><sp/>Loads<sp/>a<sp/>script<sp/>from<sp/>memory</highlight></codeline>
<codeline lineno="239"><highlight class="comment">*</highlight></codeline>
<codeline lineno="240"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>tag</highlight></codeline>
<codeline lineno="241"><highlight class="comment">*<sp/><sp/><sp/><sp/>Extension<sp/>of<sp/>the<sp/>script</highlight></codeline>
<codeline lineno="242"><highlight class="comment">*</highlight></codeline>
<codeline lineno="243"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>buffer</highlight></codeline>
<codeline lineno="244"><highlight class="comment">*<sp/><sp/><sp/><sp/>Memory<sp/>block<sp/>representing<sp/>the<sp/>string<sp/>of<sp/>the<sp/>script</highlight></codeline>
<codeline lineno="245"><highlight class="comment">*</highlight></codeline>
<codeline lineno="246"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="247"><highlight class="comment">*<sp/><sp/><sp/><sp/>Memory<sp/>block<sp/>representing<sp/>the<sp/>string<sp/>of<sp/>the<sp/>script</highlight></codeline>
<codeline lineno="248"><highlight class="comment">*</highlight></codeline>
<codeline lineno="249"><highlight class="comment">*<sp/><sp/>@param[out]<sp/>handle</highlight></codeline>
<codeline lineno="250"><highlight class="comment">*<sp/><sp/><sp/><sp/>Optional<sp/>pointer<sp/>to<sp/>reference<sp/>of<sp/>loaded<sp/>handle</highlight></codeline>
<codeline lineno="251"><highlight class="comment">*</highlight></codeline>
<codeline lineno="252"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="253"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="254"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1aa202ac4aeb04129ab475099af696b7b8" kindref="member">metacall_load_from_memory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**handle);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="258"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="259"><highlight class="comment">*<sp/><sp/><sp/><sp/>Loads<sp/>a<sp/>package<sp/>of<sp/>scrips<sp/>from<sp/>file<sp/>specified<sp/>by<sp/>@path<sp/>into<sp/>loader<sp/>defined<sp/>by<sp/>@extension</highlight></codeline>
<codeline lineno="260"><highlight class="comment">*</highlight></codeline>
<codeline lineno="261"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>tag</highlight></codeline>
<codeline lineno="262"><highlight class="comment">*<sp/><sp/><sp/><sp/>Extension<sp/>of<sp/>the<sp/>script</highlight></codeline>
<codeline lineno="263"><highlight class="comment">*</highlight></codeline>
<codeline lineno="264"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>path</highlight></codeline>
<codeline lineno="265"><highlight class="comment">*<sp/><sp/><sp/><sp/>Path<sp/>of<sp/>the<sp/>package</highlight></codeline>
<codeline lineno="266"><highlight class="comment">*</highlight></codeline>
<codeline lineno="267"><highlight class="comment">*<sp/><sp/>@param[out]<sp/>handle</highlight></codeline>
<codeline lineno="268"><highlight class="comment">*<sp/><sp/><sp/><sp/>Optional<sp/>pointer<sp/>to<sp/>reference<sp/>of<sp/>loaded<sp/>handle</highlight></codeline>
<codeline lineno="269"><highlight class="comment">*</highlight></codeline>
<codeline lineno="270"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="271"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="272"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1ae62d509141fe85874f1865f61b4075af" kindref="member">metacall_load_from_package</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**handle);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="276"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="277"><highlight class="comment">*<sp/><sp/><sp/><sp/>Loads<sp/>a<sp/>a<sp/>list<sp/>of<sp/>scrips<sp/>from<sp/>configuration<sp/>specified<sp/>by<sp/>@path<sp/>into<sp/>loader</highlight></codeline>
<codeline lineno="278"><highlight class="comment">*<sp/><sp/><sp/><sp/>with<sp/>the<sp/>following<sp/>format:</highlight></codeline>
<codeline lineno="279"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;language_id&quot;:<sp/>&quot;&lt;tag&gt;&quot;,</highlight></codeline>
<codeline lineno="281"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;path&quot;:<sp/>&quot;&lt;path&gt;&quot;,</highlight></codeline>
<codeline lineno="282"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;scripts&quot;:<sp/>[<sp/>&quot;&lt;script0&gt;&quot;,<sp/>&quot;&lt;script1&gt;&quot;,<sp/>...,<sp/>&quot;&lt;scriptN&gt;&quot;<sp/>]</highlight></codeline>
<codeline lineno="283"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="comment">*</highlight></codeline>
<codeline lineno="285"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>path</highlight></codeline>
<codeline lineno="286"><highlight class="comment">*<sp/><sp/><sp/><sp/>Path<sp/>of<sp/>the<sp/>configuration</highlight></codeline>
<codeline lineno="287"><highlight class="comment">*</highlight></codeline>
<codeline lineno="288"><highlight class="comment">*<sp/><sp/>@param[out]<sp/>handle</highlight></codeline>
<codeline lineno="289"><highlight class="comment">*<sp/><sp/><sp/><sp/>Optional<sp/>pointer<sp/>to<sp/>reference<sp/>of<sp/>loaded<sp/>handle</highlight></codeline>
<codeline lineno="290"><highlight class="comment">*</highlight></codeline>
<codeline lineno="291"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>allocator</highlight></codeline>
<codeline lineno="292"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>allocator<sp/>will<sp/>allocate<sp/>the<sp/>configuration</highlight></codeline>
<codeline lineno="293"><highlight class="comment">*</highlight></codeline>
<codeline lineno="294"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="295"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="296"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a00a0cad16a66aaaab0f2e523ee390be3" kindref="member">metacall_load_from_configuration</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*allocator);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="299"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="300"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="301"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args</highlight></codeline>
<codeline lineno="302"><highlight class="comment">*</highlight></codeline>
<codeline lineno="303"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="304"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="305"><highlight class="comment">*</highlight></codeline>
<codeline lineno="306"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="307"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="308"><highlight class="comment">*</highlight></codeline>
<codeline lineno="309"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="310"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="311"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1afc2c0d0a24b9f6e4908bbac36d98954b" kindref="member">metacallv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[]);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="314"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="315"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="316"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args</highlight></codeline>
<codeline lineno="317"><highlight class="comment">*</highlight></codeline>
<codeline lineno="318"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="319"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="320"><highlight class="comment">*</highlight></codeline>
<codeline lineno="321"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="322"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="323"><highlight class="comment">*</highlight></codeline>
<codeline lineno="324"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="325"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="326"><highlight class="comment">*</highlight></codeline>
<codeline lineno="327"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="328"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="329"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1ad934b33c0c04c424d7080735d86a240c" kindref="member">metacallv_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="333"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="334"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>handle<sp/>@handle<sp/>value<sp/>array<sp/>@args</highlight></codeline>
<codeline lineno="335"><highlight class="comment">*<sp/><sp/><sp/><sp/>This<sp/>function<sp/>allows<sp/>to<sp/>avoid<sp/>name<sp/>collisions<sp/>when<sp/>calling<sp/>functions<sp/>by<sp/>name</highlight></codeline>
<codeline lineno="336"><highlight class="comment">*</highlight></codeline>
<codeline lineno="337"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>handle</highlight></codeline>
<codeline lineno="338"><highlight class="comment">*<sp/><sp/><sp/><sp/>Handle<sp/>where<sp/>the<sp/>function<sp/>belongs</highlight></codeline>
<codeline lineno="339"><highlight class="comment">*</highlight></codeline>
<codeline lineno="340"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="341"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="342"><highlight class="comment">*</highlight></codeline>
<codeline lineno="343"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="344"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="345"><highlight class="comment">*</highlight></codeline>
<codeline lineno="346"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="347"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="348"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1abaa8b58b55e753ebcb2c6ca7221261fe" kindref="member">metacallhv</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[]);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="352"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="353"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>handle<sp/>@handle<sp/>value<sp/>array<sp/>@args</highlight></codeline>
<codeline lineno="354"><highlight class="comment">*<sp/><sp/><sp/><sp/>This<sp/>function<sp/>allows<sp/>to<sp/>avoid<sp/>name<sp/>collisions<sp/>when<sp/>calling<sp/>functions<sp/>by<sp/>name</highlight></codeline>
<codeline lineno="355"><highlight class="comment">*<sp/><sp/><sp/><sp/>Includes<sp/>@size<sp/>in<sp/>order<sp/>to<sp/>allow<sp/>variadic<sp/>arguments<sp/>or<sp/>safe<sp/>calls</highlight></codeline>
<codeline lineno="356"><highlight class="comment">*</highlight></codeline>
<codeline lineno="357"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>handle</highlight></codeline>
<codeline lineno="358"><highlight class="comment">*<sp/><sp/><sp/><sp/>Handle<sp/>where<sp/>the<sp/>function<sp/>belongs</highlight></codeline>
<codeline lineno="359"><highlight class="comment">*</highlight></codeline>
<codeline lineno="360"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="361"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="362"><highlight class="comment">*</highlight></codeline>
<codeline lineno="363"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="364"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="365"><highlight class="comment">*</highlight></codeline>
<codeline lineno="366"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="367"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="368"><highlight class="comment">*</highlight></codeline>
<codeline lineno="369"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="370"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="371"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a0973f34ae8081817abbcc84e54b09fcc" kindref="member">metacallhv_s</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="374"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="375"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="376"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>variable<sp/>arguments<sp/>@va_args</highlight></codeline>
<codeline lineno="377"><highlight class="comment">*</highlight></codeline>
<codeline lineno="378"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="379"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="380"><highlight class="comment">*</highlight></codeline>
<codeline lineno="381"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>va_args</highlight></codeline>
<codeline lineno="382"><highlight class="comment">*<sp/><sp/><sp/><sp/>Varidic<sp/>function<sp/>parameters</highlight></codeline>
<codeline lineno="383"><highlight class="comment">*</highlight></codeline>
<codeline lineno="384"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="385"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="386"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a927b07b0d76019322c9a84a768333be7" kindref="member">metacall</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>...);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="389"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="390"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="391"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>type<sp/>array<sp/>@ids<sp/>and<sp/>variable<sp/>arguments<sp/>@va_args</highlight></codeline>
<codeline lineno="392"><highlight class="comment">*</highlight></codeline>
<codeline lineno="393"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="394"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="395"><highlight class="comment">*</highlight></codeline>
<codeline lineno="396"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>ids</highlight></codeline>
<codeline lineno="397"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>types<sp/>refered<sp/>to<sp/>@va_args</highlight></codeline>
<codeline lineno="398"><highlight class="comment">*</highlight></codeline>
<codeline lineno="399"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>va_args</highlight></codeline>
<codeline lineno="400"><highlight class="comment">*<sp/><sp/><sp/><sp/>Varidic<sp/>function<sp/>parameters</highlight></codeline>
<codeline lineno="401"><highlight class="comment">*</highlight></codeline>
<codeline lineno="402"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="403"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="404"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a3d6052ad320dd2bb83d6c39d7bac3a1e" kindref="member">metacallt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref><sp/>ids[],<sp/>...);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="407"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="408"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="409"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>type<sp/>array<sp/>@ids<sp/>and<sp/>variable<sp/>arguments<sp/>@va_args</highlight></codeline>
<codeline lineno="410"><highlight class="comment">*</highlight></codeline>
<codeline lineno="411"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="412"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="413"><highlight class="comment">*</highlight></codeline>
<codeline lineno="414"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>ids</highlight></codeline>
<codeline lineno="415"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>types<sp/>refered<sp/>to<sp/>@va_args</highlight></codeline>
<codeline lineno="416"><highlight class="comment">*</highlight></codeline>
<codeline lineno="417"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="418"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="419"><highlight class="comment">*</highlight></codeline>
<codeline lineno="420"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>va_args</highlight></codeline>
<codeline lineno="421"><highlight class="comment">*<sp/><sp/><sp/><sp/>Varidic<sp/>function<sp/>parameters</highlight></codeline>
<codeline lineno="422"><highlight class="comment">*</highlight></codeline>
<codeline lineno="423"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="424"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="425"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a93e003693bcf043424e5bd77255ef629" kindref="member">metacallt_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref><sp/>ids[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>...);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="429"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="430"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>type<sp/>array<sp/>@ids<sp/>and<sp/>variable<sp/>arguments<sp/>@va_args</highlight></codeline>
<codeline lineno="431"><highlight class="comment">*</highlight></codeline>
<codeline lineno="432"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>handle</highlight></codeline>
<codeline lineno="433"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>handle<sp/>returned<sp/>by<sp/>metacall_load_from_{file,<sp/>memory,<sp/>package}</highlight></codeline>
<codeline lineno="434"><highlight class="comment">*</highlight></codeline>
<codeline lineno="435"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="436"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="437"><highlight class="comment">*</highlight></codeline>
<codeline lineno="438"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>ids</highlight></codeline>
<codeline lineno="439"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>types<sp/>refered<sp/>to<sp/>@va_args</highlight></codeline>
<codeline lineno="440"><highlight class="comment">*</highlight></codeline>
<codeline lineno="441"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="442"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="443"><highlight class="comment">*</highlight></codeline>
<codeline lineno="444"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>va_args</highlight></codeline>
<codeline lineno="445"><highlight class="comment">*<sp/><sp/><sp/><sp/>Varidic<sp/>function<sp/>parameters</highlight></codeline>
<codeline lineno="446"><highlight class="comment">*</highlight></codeline>
<codeline lineno="447"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="448"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="449"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a020d72d3ec5fac1ef707e57e356ef0ea" kindref="member">metacallht_s</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref><sp/>ids[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>...);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="452"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="453"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="454"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>the<sp/>function<sp/>by<sp/>@name</highlight></codeline>
<codeline lineno="455"><highlight class="comment">*</highlight></codeline>
<codeline lineno="456"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="457"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="458"><highlight class="comment">*</highlight></codeline>
<codeline lineno="459"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="460"><highlight class="comment">*<sp/><sp/><sp/><sp/>Function<sp/>reference,<sp/>null<sp/>if<sp/>the<sp/>function<sp/>does<sp/>not<sp/>exist</highlight></codeline>
<codeline lineno="461"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a137dbf351f620ac5c1daebf1564f099b" kindref="member">metacall_function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="464"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="465"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="466"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>the<sp/>function<sp/>by<sp/>@name<sp/>from<sp/>@handle</highlight></codeline>
<codeline lineno="467"><highlight class="comment">*</highlight></codeline>
<codeline lineno="468"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>handle</highlight></codeline>
<codeline lineno="469"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>handle<sp/>returned<sp/>by<sp/>metacall_load_from_{file,<sp/>memory,<sp/>package}</highlight></codeline>
<codeline lineno="470"><highlight class="comment">*</highlight></codeline>
<codeline lineno="471"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="472"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="473"><highlight class="comment">*</highlight></codeline>
<codeline lineno="474"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="475"><highlight class="comment">*<sp/><sp/><sp/><sp/>Function<sp/>reference,<sp/>null<sp/>if<sp/>the<sp/>function<sp/>does<sp/>not<sp/>exist</highlight></codeline>
<codeline lineno="476"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a0733570d83d6daf0e421e3e414547566" kindref="member">metacall_handle_function</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="479"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="480"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="481"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>the<sp/>function<sp/>parameter<sp/>type<sp/>id</highlight></codeline>
<codeline lineno="482"><highlight class="comment">*</highlight></codeline>
<codeline lineno="483"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="484"><highlight class="comment">*<sp/><sp/><sp/><sp/>The<sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>obtained<sp/>from<sp/>metacall_function</highlight></codeline>
<codeline lineno="485"><highlight class="comment">*</highlight></codeline>
<codeline lineno="486"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>parameter</highlight></codeline>
<codeline lineno="487"><highlight class="comment">*<sp/><sp/><sp/><sp/>The<sp/>index<sp/>of<sp/>the<sp/>parameter<sp/>to<sp/>be<sp/>retrieved</highlight></codeline>
<codeline lineno="488"><highlight class="comment">*</highlight></codeline>
<codeline lineno="489"><highlight class="comment">*<sp/><sp/>@param[out]<sp/>id</highlight></codeline>
<codeline lineno="490"><highlight class="comment">*<sp/><sp/><sp/><sp/>The<sp/>parameter<sp/>type<sp/>id<sp/>that<sp/>will<sp/>be<sp/>returned</highlight></codeline>
<codeline lineno="491"><highlight class="comment">*</highlight></codeline>
<codeline lineno="492"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="493"><highlight class="comment">*<sp/><sp/><sp/><sp/>Return<sp/>0<sp/>if<sp/>the<sp/>@parameter<sp/>index<sp/>exists<sp/>and<sp/>@func<sp/>is<sp/>valid,<sp/>1<sp/>otherwhise</highlight></codeline>
<codeline lineno="494"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a26ff10520ec45fc6dc56e6b731f7cd98" kindref="member">metacall_function_parameter_type</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>parameter,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="497"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="498"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="499"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>the<sp/>function<sp/>return<sp/>type<sp/>id</highlight></codeline>
<codeline lineno="500"><highlight class="comment">*</highlight></codeline>
<codeline lineno="501"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="502"><highlight class="comment">*<sp/><sp/><sp/><sp/>The<sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>obtained<sp/>from<sp/>metacall_function</highlight></codeline>
<codeline lineno="503"><highlight class="comment">*</highlight></codeline>
<codeline lineno="504"><highlight class="comment">*</highlight></codeline>
<codeline lineno="505"><highlight class="comment">*<sp/><sp/>@param[out]<sp/>id</highlight></codeline>
<codeline lineno="506"><highlight class="comment">*<sp/><sp/><sp/><sp/>The<sp/>value<sp/>id<sp/>of<sp/>the<sp/>return<sp/>type<sp/>of<sp/>the<sp/>function<sp/>@func</highlight></codeline>
<codeline lineno="507"><highlight class="comment">*</highlight></codeline>
<codeline lineno="508"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="509"><highlight class="comment">*<sp/><sp/><sp/><sp/>Return<sp/>0<sp/>if<sp/>the<sp/>@func<sp/>is<sp/>valid,<sp/>1<sp/>otherwhise</highlight></codeline>
<codeline lineno="510"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a391f6f382c453d8903889a910f59bf4c" kindref="member">metacall_function_return_type</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="513"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="514"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="515"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>minimun<sp/>mumber<sp/>of<sp/>arguments<sp/>accepted<sp/>by<sp/>function<sp/>@func</highlight></codeline>
<codeline lineno="516"><highlight class="comment">*</highlight></codeline>
<codeline lineno="517"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="518"><highlight class="comment">*<sp/><sp/><sp/><sp/>Function<sp/>reference</highlight></codeline>
<codeline lineno="519"><highlight class="comment">*</highlight></codeline>
<codeline lineno="520"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="521"><highlight class="comment">*<sp/><sp/><sp/><sp/>Return<sp/>mumber<sp/>of<sp/>arguments</highlight></codeline>
<codeline lineno="522"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1ae41ffa4531b7819e7f0d1c580ef508c5" kindref="member">metacall_function_size</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="525"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="526"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="527"><highlight class="comment">*<sp/><sp/><sp/><sp/>Check<sp/>if<sp/>the<sp/>function<sp/>@func<sp/>is<sp/>asynchronous<sp/>or<sp/>synchronous</highlight></codeline>
<codeline lineno="528"><highlight class="comment">*</highlight></codeline>
<codeline lineno="529"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="530"><highlight class="comment">*<sp/><sp/><sp/><sp/>Function<sp/>reference</highlight></codeline>
<codeline lineno="531"><highlight class="comment">*</highlight></codeline>
<codeline lineno="532"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="533"><highlight class="comment">*<sp/><sp/><sp/><sp/>Return<sp/>0<sp/>if<sp/>it<sp/>is<sp/>syncrhonous,<sp/>1<sp/>if<sp/>it<sp/>is<sp/>asynchronous<sp/>and<sp/>-1<sp/>if<sp/>the<sp/>function<sp/>is<sp/>NULL</highlight></codeline>
<codeline lineno="534"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a42f7b6d24d91f6aa2b1a1bf773a2be3b" kindref="member">metacall_function_async</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="537"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="538"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="539"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>the<sp/>handle<sp/>by<sp/>@name</highlight></codeline>
<codeline lineno="540"><highlight class="comment">*</highlight></codeline>
<codeline lineno="541"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>tag</highlight></codeline>
<codeline lineno="542"><highlight class="comment">*<sp/><sp/><sp/><sp/>Extension<sp/>of<sp/>the<sp/>script</highlight></codeline>
<codeline lineno="543"><highlight class="comment">*</highlight></codeline>
<codeline lineno="544"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="545"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>handle</highlight></codeline>
<codeline lineno="546"><highlight class="comment">*</highlight></codeline>
<codeline lineno="547"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="548"><highlight class="comment">*<sp/><sp/><sp/><sp/>Handle<sp/>reference,<sp/>null<sp/>if<sp/>the<sp/>function<sp/>does<sp/>not<sp/>exist</highlight></codeline>
<codeline lineno="549"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a579d699c4407cc27e94d216303f152aa" kindref="member">metacall_handle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="552"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="553"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="554"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>name<sp/>of<sp/>a<sp/>@handle</highlight></codeline>
<codeline lineno="555"><highlight class="comment">*</highlight></codeline>
<codeline lineno="556"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>handle</highlight></codeline>
<codeline lineno="557"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>handle<sp/>to<sp/>be<sp/>retrieved</highlight></codeline>
<codeline lineno="558"><highlight class="comment">*</highlight></codeline>
<codeline lineno="559"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="560"><highlight class="comment">*<sp/><sp/><sp/><sp/>String<sp/>that<sp/>references<sp/>the<sp/>handle</highlight></codeline>
<codeline lineno="561"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1af1a1d52c74b30adba3e328eafb77cf3c" kindref="member">metacall_handle_id</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="564"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="565"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="566"><highlight class="comment">*<sp/><sp/><sp/><sp/>Return<sp/>a<sp/>value<sp/>representing<sp/>the<sp/>handle<sp/>as<sp/>a<sp/>map<sp/>of<sp/>functions<sp/>(or<sp/>values)</highlight></codeline>
<codeline lineno="567"><highlight class="comment">*</highlight></codeline>
<codeline lineno="568"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>handle</highlight></codeline>
<codeline lineno="569"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>the<sp/>handle<sp/>to<sp/>be<sp/>described</highlight></codeline>
<codeline lineno="570"><highlight class="comment">*</highlight></codeline>
<codeline lineno="571"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="572"><highlight class="comment">*<sp/><sp/><sp/><sp/>A<sp/>value<sp/>of<sp/>type<sp/>map<sp/>on<sp/>success,<sp/>null<sp/>otherwise</highlight></codeline>
<codeline lineno="573"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1ad69cc4988cf490c58d1c5d72ce7a3f95" kindref="member">metacall_handle_export</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="576"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="577"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="578"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args<sp/>and<sp/>function<sp/>@func</highlight></codeline>
<codeline lineno="579"><highlight class="comment">*</highlight></codeline>
<codeline lineno="580"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="581"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="582"><highlight class="comment">*</highlight></codeline>
<codeline lineno="583"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="584"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="585"><highlight class="comment">*</highlight></codeline>
<codeline lineno="586"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="587"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="588"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a7029ce54bb2a8fb4516415e42d6d986b" kindref="member">metacallfv</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[]);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="591"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="592"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="593"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args<sp/>and<sp/>function<sp/>@func</highlight></codeline>
<codeline lineno="594"><highlight class="comment">*</highlight></codeline>
<codeline lineno="595"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="596"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="597"><highlight class="comment">*</highlight></codeline>
<codeline lineno="598"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="599"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="600"><highlight class="comment">*</highlight></codeline>
<codeline lineno="601"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="602"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>function<sp/>arguments</highlight></codeline>
<codeline lineno="603"><highlight class="comment">*</highlight></codeline>
<codeline lineno="604"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="605"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="606"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1afcaf2d96cbe7e899e9f5450be7d7d1c4" kindref="member">metacallfv_s</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="609"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="610"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="611"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>variable<sp/>arguments<sp/>@va_args<sp/>and<sp/>function<sp/>@func</highlight></codeline>
<codeline lineno="612"><highlight class="comment">*</highlight></codeline>
<codeline lineno="613"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="614"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="615"><highlight class="comment">*</highlight></codeline>
<codeline lineno="616"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="617"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="618"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1ae523e9a658d5ea11bde72660df84df95" kindref="member">metacallf</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/>...);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="621"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="622"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="623"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>function<sp/>@func<sp/>and<sp/>serial<sp/>@buffer<sp/>of<sp/>size<sp/>@size</highlight></codeline>
<codeline lineno="624"><highlight class="comment">*</highlight></codeline>
<codeline lineno="625"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="626"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="627"><highlight class="comment">*</highlight></codeline>
<codeline lineno="628"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>buffer</highlight></codeline>
<codeline lineno="629"><highlight class="comment">*<sp/><sp/><sp/><sp/>String<sp/>representing<sp/>an<sp/>array<sp/>to<sp/>be<sp/>deserialized<sp/>into<sp/>arguments<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="630"><highlight class="comment">*</highlight></codeline>
<codeline lineno="631"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="632"><highlight class="comment">*<sp/><sp/><sp/><sp/>Size<sp/>of<sp/>string<sp/>@buffer</highlight></codeline>
<codeline lineno="633"><highlight class="comment">*</highlight></codeline>
<codeline lineno="634"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>allocator</highlight></codeline>
<codeline lineno="635"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>allocator<sp/>will<sp/>allocate<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="636"><highlight class="comment">*</highlight></codeline>
<codeline lineno="637"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="638"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="639"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a6de5e0d836963404a27918bfade98cad" kindref="member">metacallfs</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*allocator);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="642"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="643"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="644"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>value<sp/>map<sp/>(@keys<sp/>-&gt;<sp/>@values)<sp/>and<sp/>function<sp/>@func</highlight></codeline>
<codeline lineno="645"><highlight class="comment">*</highlight></codeline>
<codeline lineno="646"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="647"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="648"><highlight class="comment">*</highlight></codeline>
<codeline lineno="649"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>keys</highlight></codeline>
<codeline lineno="650"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>values<sp/>representing<sp/>argument<sp/>keys</highlight></codeline>
<codeline lineno="651"><highlight class="comment">*</highlight></codeline>
<codeline lineno="652"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>values</highlight></codeline>
<codeline lineno="653"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>values<sp/>representing<sp/>argument<sp/>values<sp/>data</highlight></codeline>
<codeline lineno="654"><highlight class="comment">*</highlight></codeline>
<codeline lineno="655"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="656"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="657"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1ac1ecf16f1985cecee777d9e84c70d79a" kindref="member">metacallfmv</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*keys[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*values[]);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="660"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="661"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="662"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>function<sp/>anonymously<sp/>by<sp/>function<sp/>@func<sp/>and<sp/>serial<sp/>@buffer<sp/>of<sp/>size<sp/>@size</highlight></codeline>
<codeline lineno="663"><highlight class="comment">*</highlight></codeline>
<codeline lineno="664"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="665"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="666"><highlight class="comment">*</highlight></codeline>
<codeline lineno="667"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>buffer</highlight></codeline>
<codeline lineno="668"><highlight class="comment">*<sp/><sp/><sp/><sp/>String<sp/>representing<sp/>a<sp/>map<sp/>to<sp/>be<sp/>deserialized<sp/>into<sp/>arguments<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="669"><highlight class="comment">*</highlight></codeline>
<codeline lineno="670"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="671"><highlight class="comment">*<sp/><sp/><sp/><sp/>Size<sp/>of<sp/>string<sp/>@buffer</highlight></codeline>
<codeline lineno="672"><highlight class="comment">*</highlight></codeline>
<codeline lineno="673"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>allocator</highlight></codeline>
<codeline lineno="674"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>allocator<sp/>will<sp/>allocate<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="675"><highlight class="comment">*</highlight></codeline>
<codeline lineno="676"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="677"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="678"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1ae381876c35f6b194c96c19a9b808e313" kindref="member">metacallfms</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*allocator);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="681"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="682"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="683"><highlight class="comment">*<sp/><sp/><sp/><sp/>Register<sp/>a<sp/>function<sp/>by<sp/>name<sp/>@name<sp/>and<sp/>arguments<sp/>@va_args</highlight></codeline>
<codeline lineno="684"><highlight class="comment">*</highlight></codeline>
<codeline lineno="685"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="686"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="687"><highlight class="comment">*</highlight></codeline>
<codeline lineno="688"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>invoke</highlight></codeline>
<codeline lineno="689"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>invoke<sp/>interface<sp/>(argc,<sp/>argv,<sp/>data)</highlight></codeline>
<codeline lineno="690"><highlight class="comment">*</highlight></codeline>
<codeline lineno="691"><highlight class="comment">*<sp/><sp/>@param[out]<sp/>func</highlight></codeline>
<codeline lineno="692"><highlight class="comment">*<sp/><sp/><sp/><sp/>Will<sp/>set<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>if<sp/>the<sp/>parameter<sp/>is<sp/>not<sp/>null</highlight></codeline>
<codeline lineno="693"><highlight class="comment">*</highlight></codeline>
<codeline lineno="694"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>return_type</highlight></codeline>
<codeline lineno="695"><highlight class="comment">*<sp/><sp/><sp/><sp/>Type<sp/>of<sp/>return<sp/>value</highlight></codeline>
<codeline lineno="696"><highlight class="comment">*</highlight></codeline>
<codeline lineno="697"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="698"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>function<sp/>arguments</highlight></codeline>
<codeline lineno="699"><highlight class="comment">*</highlight></codeline>
<codeline lineno="700"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>va_args</highlight></codeline>
<codeline lineno="701"><highlight class="comment">*<sp/><sp/><sp/><sp/>Varidic<sp/>function<sp/>parameter<sp/>types</highlight></codeline>
<codeline lineno="702"><highlight class="comment">*</highlight></codeline>
<codeline lineno="703"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="704"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="705"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a810ca74b8efef842df8ea7baf2b87e67" kindref="member">metacall_register</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*invoke)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**func,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref><sp/>return_type,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>...);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="708"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="709"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="710"><highlight class="comment">*<sp/><sp/><sp/><sp/>Register<sp/>a<sp/>function<sp/>by<sp/>name<sp/>@name<sp/>and<sp/>arguments<sp/>@types</highlight></codeline>
<codeline lineno="711"><highlight class="comment">*</highlight></codeline>
<codeline lineno="712"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="713"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="714"><highlight class="comment">*</highlight></codeline>
<codeline lineno="715"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>invoke</highlight></codeline>
<codeline lineno="716"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>invoke<sp/>interface<sp/>(argc,<sp/>argv,<sp/>data)</highlight></codeline>
<codeline lineno="717"><highlight class="comment">*</highlight></codeline>
<codeline lineno="718"><highlight class="comment">*<sp/><sp/>@param[out]<sp/>func</highlight></codeline>
<codeline lineno="719"><highlight class="comment">*<sp/><sp/><sp/><sp/>Will<sp/>set<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>if<sp/>the<sp/>parameter<sp/>is<sp/>not<sp/>null</highlight></codeline>
<codeline lineno="720"><highlight class="comment">*</highlight></codeline>
<codeline lineno="721"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>return_type</highlight></codeline>
<codeline lineno="722"><highlight class="comment">*<sp/><sp/><sp/><sp/>Type<sp/>of<sp/>return<sp/>value</highlight></codeline>
<codeline lineno="723"><highlight class="comment">*</highlight></codeline>
<codeline lineno="724"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="725"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>function<sp/>arguments</highlight></codeline>
<codeline lineno="726"><highlight class="comment">*</highlight></codeline>
<codeline lineno="727"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>types</highlight></codeline>
<codeline lineno="728"><highlight class="comment">*<sp/><sp/><sp/><sp/>List<sp/>of<sp/>parameter<sp/>types</highlight></codeline>
<codeline lineno="729"><highlight class="comment">*</highlight></codeline>
<codeline lineno="730"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="731"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="732"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1ae0f575287847cd57f5a549b2b211db1d" kindref="member">metacall_registerv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*invoke)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**func,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref><sp/>return_type,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref><sp/>types[]);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="735"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="736"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="737"><highlight class="comment">*<sp/><sp/><sp/><sp/>Executes<sp/>an<sp/>asynchronous<sp/>call<sp/>to<sp/>the<sp/>function<sp/>and<sp/>registers<sp/>a<sp/>callback<sp/>to<sp/>be<sp/>executed<sp/>when<sp/>a<sp/>future<sp/>is<sp/>resolved<sp/>(it<sp/>does<sp/>block)</highlight></codeline>
<codeline lineno="738"><highlight class="comment">*</highlight></codeline>
<codeline lineno="739"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="740"><highlight class="comment">*<sp/><sp/><sp/><sp/>The<sp/>name<sp/>of<sp/>the<sp/>function<sp/>to<sp/>be<sp/>called<sp/>asynchronously</highlight></codeline>
<codeline lineno="741"><highlight class="comment">*</highlight></codeline>
<codeline lineno="742"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="743"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>the<sp/>values<sp/>to<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="744"><highlight class="comment">*</highlight></codeline>
<codeline lineno="745"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>resolve_callback</highlight></codeline>
<codeline lineno="746"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>completion</highlight></codeline>
<codeline lineno="747"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="748"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>representing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>future<sp/>resolution</highlight></codeline>
<codeline lineno="749"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="750"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>reference<sp/>to<sp/>@data<sp/>that<sp/>will<sp/>be<sp/>used<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="751"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@return</highlight></codeline>
<codeline lineno="752"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>operation,</highlight></codeline>
<codeline lineno="753"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>wrapped<sp/>into<sp/>a<sp/>future<sp/>later<sp/>on<sp/>to<sp/>be<sp/>returned<sp/>by<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="754"><highlight class="comment">*</highlight></codeline>
<codeline lineno="755"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>reject_callback</highlight></codeline>
<codeline lineno="756"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>error<sp/>(signature<sp/>is<sp/>identical<sp/>as<sp/>resolve_callback)</highlight></codeline>
<codeline lineno="757"><highlight class="comment">*</highlight></codeline>
<codeline lineno="758"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>data</highlight></codeline>
<codeline lineno="759"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>a<sp/>context<sp/>that<sp/>will<sp/>act<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="760"><highlight class="comment">*</highlight></codeline>
<codeline lineno="761"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="762"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>returned<sp/>by<sp/>@resolve_callback<sp/>or<sp/>@reject_callback<sp/>wrapped<sp/>in<sp/>a<sp/>future</highlight></codeline>
<codeline lineno="763"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a52ef2927638d958c6e76555fc49a765b" kindref="member">metacall_await</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*resolve_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*reject_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="766"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="767"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="768"><highlight class="comment">*<sp/><sp/><sp/><sp/>Awaits<sp/>for<sp/>a<sp/>promise<sp/>and<sp/>registers<sp/>a<sp/>callback<sp/>to<sp/>be<sp/>executed<sp/>when<sp/>a<sp/>future<sp/>is<sp/>resolved</highlight></codeline>
<codeline lineno="769"><highlight class="comment">*</highlight></codeline>
<codeline lineno="770"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>f</highlight></codeline>
<codeline lineno="771"><highlight class="comment">*<sp/><sp/><sp/><sp/>The<sp/>pointer<sp/>to<sp/>the<sp/>future</highlight></codeline>
<codeline lineno="772"><highlight class="comment">*</highlight></codeline>
<codeline lineno="773"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>resolve_callback</highlight></codeline>
<codeline lineno="774"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>completion</highlight></codeline>
<codeline lineno="775"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="776"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>representing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>future<sp/>resolution</highlight></codeline>
<codeline lineno="777"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="778"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>reference<sp/>to<sp/>@data<sp/>that<sp/>will<sp/>be<sp/>used<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="779"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@return</highlight></codeline>
<codeline lineno="780"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>operation,</highlight></codeline>
<codeline lineno="781"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>wrapped<sp/>into<sp/>a<sp/>future<sp/>later<sp/>on<sp/>to<sp/>be<sp/>returned<sp/>by<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="782"><highlight class="comment">*</highlight></codeline>
<codeline lineno="783"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>reject_callback</highlight></codeline>
<codeline lineno="784"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>error<sp/>(signature<sp/>is<sp/>identical<sp/>as<sp/>resolve_callback)</highlight></codeline>
<codeline lineno="785"><highlight class="comment">*</highlight></codeline>
<codeline lineno="786"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>data</highlight></codeline>
<codeline lineno="787"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>a<sp/>context<sp/>that<sp/>will<sp/>act<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="788"><highlight class="comment">*</highlight></codeline>
<codeline lineno="789"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="790"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>returned<sp/>by<sp/>@resolve_callback<sp/>or<sp/>@reject_callback<sp/>wrapped<sp/>in<sp/>a<sp/>future</highlight></codeline>
<codeline lineno="791"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a5f24de215645b2728c80e20685cb5525" kindref="member">metacall_await_future</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*resolve_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*reject_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="794"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="795"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="796"><highlight class="comment">*<sp/><sp/><sp/><sp/>Executes<sp/>an<sp/>asynchronous<sp/>call<sp/>to<sp/>the<sp/>function<sp/>and<sp/>registers<sp/>a<sp/>callback<sp/>to<sp/>be<sp/>executed<sp/>when<sp/>a<sp/>future<sp/>is<sp/>resolved<sp/>(it<sp/>does<sp/>block)</highlight></codeline>
<codeline lineno="797"><highlight class="comment">*</highlight></codeline>
<codeline lineno="798"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="799"><highlight class="comment">*<sp/><sp/><sp/><sp/>The<sp/>name<sp/>of<sp/>the<sp/>function<sp/>to<sp/>be<sp/>called<sp/>asynchronously</highlight></codeline>
<codeline lineno="800"><highlight class="comment">*</highlight></codeline>
<codeline lineno="801"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="802"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>the<sp/>values<sp/>to<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="803"><highlight class="comment">*</highlight></codeline>
<codeline lineno="804"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="805"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>the<sp/>array<sp/>@args</highlight></codeline>
<codeline lineno="806"><highlight class="comment">*</highlight></codeline>
<codeline lineno="807"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>resolve_callback</highlight></codeline>
<codeline lineno="808"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>completion</highlight></codeline>
<codeline lineno="809"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="810"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>representing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>future<sp/>resolution</highlight></codeline>
<codeline lineno="811"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="812"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>reference<sp/>to<sp/>@data<sp/>that<sp/>will<sp/>be<sp/>used<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="813"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@return</highlight></codeline>
<codeline lineno="814"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>operation,</highlight></codeline>
<codeline lineno="815"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>wrapped<sp/>into<sp/>a<sp/>future<sp/>later<sp/>on<sp/>to<sp/>be<sp/>returned<sp/>by<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="816"><highlight class="comment">*</highlight></codeline>
<codeline lineno="817"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>reject_callback</highlight></codeline>
<codeline lineno="818"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>error<sp/>(signature<sp/>is<sp/>identical<sp/>as<sp/>resolve_callback)</highlight></codeline>
<codeline lineno="819"><highlight class="comment">*</highlight></codeline>
<codeline lineno="820"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>data</highlight></codeline>
<codeline lineno="821"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>a<sp/>context<sp/>that<sp/>will<sp/>act<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="822"><highlight class="comment">*</highlight></codeline>
<codeline lineno="823"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="824"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>returned<sp/>by<sp/>@resolve_callback<sp/>or<sp/>@reject_callback<sp/>wrapped<sp/>in<sp/>a<sp/>future</highlight></codeline>
<codeline lineno="825"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a698f9b1a031af836302d2634e3194f75" kindref="member">metacall_await_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*resolve_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*reject_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="828"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="829"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="830"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>an<sp/>asynchronous<sp/>function<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args<sp/>and<sp/>function<sp/>@func</highlight></codeline>
<codeline lineno="831"><highlight class="comment">*</highlight></codeline>
<codeline lineno="832"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="833"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="834"><highlight class="comment">*</highlight></codeline>
<codeline lineno="835"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="836"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>values</highlight></codeline>
<codeline lineno="837"><highlight class="comment">*</highlight></codeline>
<codeline lineno="838"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>resolve_callback</highlight></codeline>
<codeline lineno="839"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>completion</highlight></codeline>
<codeline lineno="840"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="841"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>representing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>future<sp/>resolution</highlight></codeline>
<codeline lineno="842"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="843"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>reference<sp/>to<sp/>@data<sp/>that<sp/>will<sp/>be<sp/>used<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="844"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@return</highlight></codeline>
<codeline lineno="845"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>operation,</highlight></codeline>
<codeline lineno="846"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>wrapped<sp/>into<sp/>a<sp/>future<sp/>later<sp/>on<sp/>to<sp/>be<sp/>returned<sp/>by<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="847"><highlight class="comment">*</highlight></codeline>
<codeline lineno="848"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>reject_callback</highlight></codeline>
<codeline lineno="849"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>error<sp/>(signature<sp/>is<sp/>identical<sp/>as<sp/>resolve_callback)</highlight></codeline>
<codeline lineno="850"><highlight class="comment">*</highlight></codeline>
<codeline lineno="851"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>data</highlight></codeline>
<codeline lineno="852"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>a<sp/>context<sp/>that<sp/>will<sp/>act<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="853"><highlight class="comment">*</highlight></codeline>
<codeline lineno="854"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="855"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>returned<sp/>by<sp/>@resolve_callback<sp/>or<sp/>@reject_callback<sp/>wrapped<sp/>in<sp/>a<sp/>future</highlight></codeline>
<codeline lineno="856"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a4aae2677499d7bc7992840e90d754d83" kindref="member">metacallfv_await</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*resolve_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*reject_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="859"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="860"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="861"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>an<sp/>asynchronous<sp/>function<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args<sp/>and<sp/>function<sp/>@func</highlight></codeline>
<codeline lineno="862"><highlight class="comment">*</highlight></codeline>
<codeline lineno="863"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="864"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="865"><highlight class="comment">*</highlight></codeline>
<codeline lineno="866"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="867"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>values</highlight></codeline>
<codeline lineno="868"><highlight class="comment">*</highlight></codeline>
<codeline lineno="869"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="870"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>the<sp/>array<sp/>@args</highlight></codeline>
<codeline lineno="871"><highlight class="comment">*</highlight></codeline>
<codeline lineno="872"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>resolve_callback</highlight></codeline>
<codeline lineno="873"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>completion</highlight></codeline>
<codeline lineno="874"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="875"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>representing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>future<sp/>resolution</highlight></codeline>
<codeline lineno="876"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="877"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>reference<sp/>to<sp/>@data<sp/>that<sp/>will<sp/>be<sp/>used<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="878"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@return</highlight></codeline>
<codeline lineno="879"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>operation,</highlight></codeline>
<codeline lineno="880"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>wrapped<sp/>into<sp/>a<sp/>future<sp/>later<sp/>on<sp/>to<sp/>be<sp/>returned<sp/>by<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="881"><highlight class="comment">*</highlight></codeline>
<codeline lineno="882"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>reject_callback</highlight></codeline>
<codeline lineno="883"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>error<sp/>(signature<sp/>is<sp/>identical<sp/>as<sp/>resolve_callback)</highlight></codeline>
<codeline lineno="884"><highlight class="comment">*</highlight></codeline>
<codeline lineno="885"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>data</highlight></codeline>
<codeline lineno="886"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>a<sp/>context<sp/>that<sp/>will<sp/>act<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="887"><highlight class="comment">*</highlight></codeline>
<codeline lineno="888"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="889"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>returned<sp/>by<sp/>@resolve_callback<sp/>or<sp/>@reject_callback<sp/>wrapped<sp/>in<sp/>a<sp/>future</highlight></codeline>
<codeline lineno="890"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a9c5ead1f1aa559e58a65f69ae51972cb" kindref="member">metacallfv_await_s</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*resolve_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*reject_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="893"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="894"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="895"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>an<sp/>asynchronous<sp/>function<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args<sp/>and<sp/>function<sp/>@func<sp/>(offered<sp/>without<sp/>function<sp/>pointers<sp/>for<sp/>languages<sp/>without<sp/>support<sp/>to<sp/>function<sp/>pointers)</highlight></codeline>
<codeline lineno="896"><highlight class="comment">*</highlight></codeline>
<codeline lineno="897"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="898"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="899"><highlight class="comment">*</highlight></codeline>
<codeline lineno="900"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="901"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>values</highlight></codeline>
<codeline lineno="902"><highlight class="comment">*</highlight></codeline>
<codeline lineno="903"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="904"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>the<sp/>array<sp/>@args</highlight></codeline>
<codeline lineno="905"><highlight class="comment">*</highlight></codeline>
<codeline lineno="906"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>cb</highlight></codeline>
<codeline lineno="907"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>struct<sp/>containing<sp/>the<sp/>function<sp/>pointers<sp/>to<sp/>reject<sp/>and<sp/>resolve<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>completion<sp/>or<sp/>error</highlight></codeline>
<codeline lineno="908"><highlight class="comment">*</highlight></codeline>
<codeline lineno="909"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>data</highlight></codeline>
<codeline lineno="910"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>a<sp/>context<sp/>that<sp/>will<sp/>act<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="911"><highlight class="comment">*</highlight></codeline>
<codeline lineno="912"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="913"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>returned<sp/>by<sp/>@resolve_callback<sp/>or<sp/>@reject_callback<sp/>wrapped<sp/>in<sp/>a<sp/>future</highlight></codeline>
<codeline lineno="914"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1afe71978aefb3bb4d664ddf54b5ab81b7" kindref="member">metacallfv_await_struct_s</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>metacall_await_callbacks<sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="917"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="918"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="919"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>an<sp/>asynchronous<sp/>function<sp/>anonymously<sp/>by<sp/>value<sp/>map<sp/>(@keys<sp/>-&gt;<sp/>@values)<sp/>and<sp/>function<sp/>@func</highlight></codeline>
<codeline lineno="920"><highlight class="comment">*</highlight></codeline>
<codeline lineno="921"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="922"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="923"><highlight class="comment">*</highlight></codeline>
<codeline lineno="924"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>keys</highlight></codeline>
<codeline lineno="925"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>values<sp/>representing<sp/>argument<sp/>keys</highlight></codeline>
<codeline lineno="926"><highlight class="comment">*</highlight></codeline>
<codeline lineno="927"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>values</highlight></codeline>
<codeline lineno="928"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>values<sp/>representing<sp/>argument<sp/>values<sp/>data</highlight></codeline>
<codeline lineno="929"><highlight class="comment">*</highlight></codeline>
<codeline lineno="930"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="931"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>the<sp/>arrays<sp/>@keys<sp/>and<sp/>@values</highlight></codeline>
<codeline lineno="932"><highlight class="comment">*</highlight></codeline>
<codeline lineno="933"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>resolve_callback</highlight></codeline>
<codeline lineno="934"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>completion</highlight></codeline>
<codeline lineno="935"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="936"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>representing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>future<sp/>resolution</highlight></codeline>
<codeline lineno="937"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="938"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>reference<sp/>to<sp/>@data<sp/>that<sp/>will<sp/>be<sp/>used<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="939"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@return</highlight></codeline>
<codeline lineno="940"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>operation,</highlight></codeline>
<codeline lineno="941"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>wrapped<sp/>into<sp/>a<sp/>future<sp/>later<sp/>on<sp/>to<sp/>be<sp/>returned<sp/>by<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="942"><highlight class="comment">*</highlight></codeline>
<codeline lineno="943"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>reject_callback</highlight></codeline>
<codeline lineno="944"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>error<sp/>(signature<sp/>is<sp/>identical<sp/>as<sp/>resolve_callback)</highlight></codeline>
<codeline lineno="945"><highlight class="comment">*</highlight></codeline>
<codeline lineno="946"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>data</highlight></codeline>
<codeline lineno="947"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>a<sp/>context<sp/>that<sp/>will<sp/>act<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="948"><highlight class="comment">*</highlight></codeline>
<codeline lineno="949"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="950"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>returned<sp/>by<sp/>@resolve_callback<sp/>or<sp/>@reject_callback<sp/>wrapped<sp/>in<sp/>a<sp/>future</highlight></codeline>
<codeline lineno="951"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a806b1dda95f596de33a9527123fed8e4" kindref="member">metacallfmv_await</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*keys[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*values[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*resolve_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*reject_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="954"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="955"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="956"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>an<sp/>asynchronous<sp/>function<sp/>anonymously<sp/>by<sp/>value<sp/>map<sp/>(@keys<sp/>-&gt;<sp/>@values)<sp/>and<sp/>function<sp/>@func</highlight></codeline>
<codeline lineno="957"><highlight class="comment">*</highlight></codeline>
<codeline lineno="958"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="959"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="960"><highlight class="comment">*</highlight></codeline>
<codeline lineno="961"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>keys</highlight></codeline>
<codeline lineno="962"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>values<sp/>representing<sp/>argument<sp/>keys</highlight></codeline>
<codeline lineno="963"><highlight class="comment">*</highlight></codeline>
<codeline lineno="964"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>values</highlight></codeline>
<codeline lineno="965"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>values<sp/>representing<sp/>argument<sp/>values<sp/>data</highlight></codeline>
<codeline lineno="966"><highlight class="comment">*</highlight></codeline>
<codeline lineno="967"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>resolve_callback</highlight></codeline>
<codeline lineno="968"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>completion</highlight></codeline>
<codeline lineno="969"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="970"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>representing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>future<sp/>resolution</highlight></codeline>
<codeline lineno="971"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="972"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>reference<sp/>to<sp/>@data<sp/>that<sp/>will<sp/>be<sp/>used<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="973"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@return</highlight></codeline>
<codeline lineno="974"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>operation,</highlight></codeline>
<codeline lineno="975"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>wrapped<sp/>into<sp/>a<sp/>future<sp/>later<sp/>on<sp/>to<sp/>be<sp/>returned<sp/>by<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="976"><highlight class="comment">*</highlight></codeline>
<codeline lineno="977"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>reject_callback</highlight></codeline>
<codeline lineno="978"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>error<sp/>(signature<sp/>is<sp/>identical<sp/>as<sp/>resolve_callback)</highlight></codeline>
<codeline lineno="979"><highlight class="comment">*</highlight></codeline>
<codeline lineno="980"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>data</highlight></codeline>
<codeline lineno="981"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>a<sp/>context<sp/>that<sp/>will<sp/>act<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="982"><highlight class="comment">*</highlight></codeline>
<codeline lineno="983"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="984"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>returned<sp/>by<sp/>@resolve_callback<sp/>or<sp/>@reject_callback<sp/>wrapped<sp/>in<sp/>a<sp/>future</highlight></codeline>
<codeline lineno="985"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a4c8d0fa0f6b7c3607bd92524a11f3c5c" kindref="member">metacallfmv_await_s</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*keys[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*values[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*resolve_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*reject_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="988"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="989"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="990"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>an<sp/>asynchronous<sp/>function<sp/>anonymously<sp/>by<sp/>function<sp/>@func<sp/>and<sp/>serial<sp/>@buffer<sp/>of<sp/>size<sp/>@size</highlight></codeline>
<codeline lineno="991"><highlight class="comment">*</highlight></codeline>
<codeline lineno="992"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="993"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="994"><highlight class="comment">*</highlight></codeline>
<codeline lineno="995"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>buffer</highlight></codeline>
<codeline lineno="996"><highlight class="comment">*<sp/><sp/><sp/><sp/>String<sp/>representing<sp/>an<sp/>array<sp/>to<sp/>be<sp/>deserialized<sp/>into<sp/>arguments<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="997"><highlight class="comment">*</highlight></codeline>
<codeline lineno="998"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="999"><highlight class="comment">*<sp/><sp/><sp/><sp/>Size<sp/>of<sp/>string<sp/>@buffer</highlight></codeline>
<codeline lineno="1000"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1001"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>allocator</highlight></codeline>
<codeline lineno="1002"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>allocator<sp/>will<sp/>allocate<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="1003"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1004"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>resolve_callback</highlight></codeline>
<codeline lineno="1005"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>completion</highlight></codeline>
<codeline lineno="1006"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="1007"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>representing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>future<sp/>resolution</highlight></codeline>
<codeline lineno="1008"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="1009"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>reference<sp/>to<sp/>@data<sp/>that<sp/>will<sp/>be<sp/>used<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="1010"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@return</highlight></codeline>
<codeline lineno="1011"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>operation,</highlight></codeline>
<codeline lineno="1012"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>wrapped<sp/>into<sp/>a<sp/>future<sp/>later<sp/>on<sp/>to<sp/>be<sp/>returned<sp/>by<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="1013"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1014"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>reject_callback</highlight></codeline>
<codeline lineno="1015"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>error<sp/>(signature<sp/>is<sp/>identical<sp/>as<sp/>resolve_callback)</highlight></codeline>
<codeline lineno="1016"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1017"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>data</highlight></codeline>
<codeline lineno="1018"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>a<sp/>context<sp/>that<sp/>will<sp/>act<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="1019"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1020"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1021"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>returned<sp/>by<sp/>@resolve_callback<sp/>or<sp/>@reject_callback<sp/>wrapped<sp/>in<sp/>a<sp/>future</highlight></codeline>
<codeline lineno="1022"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1addd2e38b4966b41bc2473c172d52147d" kindref="member">metacallfs_await</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*allocator,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*resolve_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*reject_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1025"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1026"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1027"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>an<sp/>asynchronous<sp/>function<sp/>anonymously<sp/>by<sp/>function<sp/>@func<sp/>and<sp/>serial<sp/>@buffer<sp/>of<sp/>size<sp/>@size</highlight></codeline>
<codeline lineno="1028"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1029"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>func</highlight></codeline>
<codeline lineno="1030"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>function<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="1031"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1032"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>buffer</highlight></codeline>
<codeline lineno="1033"><highlight class="comment">*<sp/><sp/><sp/><sp/>String<sp/>representing<sp/>a<sp/>map<sp/>to<sp/>be<sp/>deserialized<sp/>into<sp/>arguments<sp/>of<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="1034"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1035"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="1036"><highlight class="comment">*<sp/><sp/><sp/><sp/>Size<sp/>of<sp/>string<sp/>@buffer</highlight></codeline>
<codeline lineno="1037"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1038"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>allocator</highlight></codeline>
<codeline lineno="1039"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>allocator<sp/>will<sp/>allocate<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="1040"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1041"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>resolve_callback</highlight></codeline>
<codeline lineno="1042"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>completion</highlight></codeline>
<codeline lineno="1043"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="1044"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>representing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>future<sp/>resolution</highlight></codeline>
<codeline lineno="1045"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@param[in]<sp/>void<sp/>*</highlight></codeline>
<codeline lineno="1046"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>reference<sp/>to<sp/>@data<sp/>that<sp/>will<sp/>be<sp/>used<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="1047"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/>@return</highlight></codeline>
<codeline lineno="1048"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>operation,</highlight></codeline>
<codeline lineno="1049"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>wrapped<sp/>into<sp/>a<sp/>future<sp/>later<sp/>on<sp/>to<sp/>be<sp/>returned<sp/>by<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="1050"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1051"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>reject_callback</highlight></codeline>
<codeline lineno="1052"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>when<sp/>task<sp/>error<sp/>(signature<sp/>is<sp/>identical<sp/>as<sp/>resolve_callback)</highlight></codeline>
<codeline lineno="1053"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1054"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>data</highlight></codeline>
<codeline lineno="1055"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>a<sp/>context<sp/>that<sp/>will<sp/>act<sp/>as<sp/>a<sp/>closure<sp/>for<sp/>the<sp/>chain</highlight></codeline>
<codeline lineno="1056"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1057"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1058"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>returned<sp/>by<sp/>@resolve_callback<sp/>or<sp/>@reject_callback<sp/>wrapped<sp/>in<sp/>a<sp/>future</highlight></codeline>
<codeline lineno="1059"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a6111e7af53fb3dcf04018aa7a06b01e3" kindref="member">metacallfms_await</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*allocator,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*resolve_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*reject_callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1062"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1063"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1064"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>the<sp/>class<sp/>by<sp/>@name</highlight></codeline>
<codeline lineno="1065"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1066"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="1067"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>class</highlight></codeline>
<codeline lineno="1068"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1069"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1070"><highlight class="comment">*<sp/><sp/><sp/><sp/>Class<sp/>reference,<sp/>null<sp/>if<sp/>the<sp/>class<sp/>does<sp/>not<sp/>exist</highlight></codeline>
<codeline lineno="1071"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a62422ba9010c261547585dc014f5f71f" kindref="member">metacall_class</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1074"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1075"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1076"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>class<sp/>method<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args<sp/>(this<sp/>procedure<sp/>assumes<sp/>there&apos;s<sp/>no<sp/>overloaded<sp/>methods<sp/>and<sp/>does<sp/>type<sp/>conversion<sp/>on<sp/>values)</highlight></codeline>
<codeline lineno="1077"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1078"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>cls</highlight></codeline>
<codeline lineno="1079"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>class</highlight></codeline>
<codeline lineno="1080"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1081"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="1082"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>method</highlight></codeline>
<codeline lineno="1083"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1084"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="1085"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="1086"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1087"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="1088"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>args<sp/>array</highlight></codeline>
<codeline lineno="1089"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1090"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1091"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="1092"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a97f50d305c683edfbeec022d41d8b749" kindref="member">metacallv_class</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cls,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1095"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1096"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1097"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>class<sp/>method<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args<sp/>and<sp/>return<sp/>value<sp/>type<sp/>@ret<sp/>(helps<sp/>to<sp/>resolve<sp/>overloading<sp/>methods)</highlight></codeline>
<codeline lineno="1098"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1099"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>cls</highlight></codeline>
<codeline lineno="1100"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>class</highlight></codeline>
<codeline lineno="1101"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1102"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="1103"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>method</highlight></codeline>
<codeline lineno="1104"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1105"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>ret</highlight></codeline>
<codeline lineno="1106"><highlight class="comment">*<sp/><sp/><sp/><sp/>Type<sp/>of<sp/>the<sp/>return<sp/>value<sp/>of<sp/>the<sp/>method</highlight></codeline>
<codeline lineno="1107"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1108"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="1109"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="1110"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1111"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="1112"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>args<sp/>array</highlight></codeline>
<codeline lineno="1113"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1114"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1115"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="1116"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1ac0e15e8ca121a9b0c5b1f22f760d7137" kindref="member">metacallt_class</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cls,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref><sp/>ret,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1119"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1120"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1121"><highlight class="comment">*<sp/><sp/><sp/><sp/>Create<sp/>a<sp/>new<sp/>object<sp/>instance<sp/>from<sp/>@cls<sp/>by<sp/>value<sp/>array<sp/>@args</highlight></codeline>
<codeline lineno="1122"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1123"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>cls</highlight></codeline>
<codeline lineno="1124"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>class</highlight></codeline>
<codeline lineno="1125"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1126"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="1127"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>new<sp/>object</highlight></codeline>
<codeline lineno="1128"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1129"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="1130"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>constructor<sp/>parameters</highlight></codeline>
<codeline lineno="1131"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1132"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="1133"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>constructor<sp/>parameters</highlight></codeline>
<codeline lineno="1134"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1135"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1136"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>new<sp/>object<sp/>value<sp/>instance</highlight></codeline>
<codeline lineno="1137"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1aee922f6a17e2d304c8074342779205c1" kindref="member">metacall_class_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cls,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1140"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1141"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1142"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>an<sp/>attribute<sp/>from<sp/>@cls<sp/>by<sp/>@key<sp/>name</highlight></codeline>
<codeline lineno="1143"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1144"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>cls</highlight></codeline>
<codeline lineno="1145"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>class</highlight></codeline>
<codeline lineno="1146"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1147"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>key</highlight></codeline>
<codeline lineno="1148"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>attribute<sp/>to<sp/>get</highlight></codeline>
<codeline lineno="1149"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1150"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1151"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>class<sp/>attribute<sp/>value<sp/>or<sp/>NULL<sp/>if<sp/>an<sp/>error<sp/>occurred</highlight></codeline>
<codeline lineno="1152"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a70337e2f826dab637d640337404831cf" kindref="member">metacall_class_static_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cls,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1155"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1156"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1157"><highlight class="comment">*<sp/><sp/><sp/><sp/>Set<sp/>an<sp/>attribute<sp/>to<sp/>@cls<sp/>by<sp/>@key<sp/>name</highlight></codeline>
<codeline lineno="1158"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1159"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>cls</highlight></codeline>
<codeline lineno="1160"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>class</highlight></codeline>
<codeline lineno="1161"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1162"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>key</highlight></codeline>
<codeline lineno="1163"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>attribute<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="1164"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1165"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>value</highlight></codeline>
<codeline lineno="1166"><highlight class="comment">*<sp/><sp/><sp/><sp/>Value<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="1167"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1168"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1169"><highlight class="comment">*<sp/><sp/><sp/><sp/>Non-zero<sp/>integer<sp/>if<sp/>an<sp/>error<sp/>ocurred</highlight></codeline>
<codeline lineno="1170"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1ad69032d3eec3834b36d907141f32332a" kindref="member">metacall_class_static_set</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cls,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1173"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1174"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1175"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>an<sp/>object<sp/>method<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args</highlight></codeline>
<codeline lineno="1176"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1177"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>obj</highlight></codeline>
<codeline lineno="1178"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>object</highlight></codeline>
<codeline lineno="1179"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1180"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="1181"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>method</highlight></codeline>
<codeline lineno="1182"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1183"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="1184"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="1185"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1186"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="1187"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>args<sp/>array</highlight></codeline>
<codeline lineno="1188"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1189"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1190"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="1191"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a1b346165cc3e9d4c958bf92c65f71ef5" kindref="member">metacallv_object</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1194"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1195"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1196"><highlight class="comment">*<sp/><sp/><sp/><sp/>Call<sp/>a<sp/>object<sp/>method<sp/>anonymously<sp/>by<sp/>value<sp/>array<sp/>@args<sp/>and<sp/>return<sp/>value<sp/>type<sp/>@ret<sp/>(helps<sp/>to<sp/>resolve<sp/>overloading<sp/>methods)</highlight></codeline>
<codeline lineno="1197"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1198"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>obj</highlight></codeline>
<codeline lineno="1199"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>object</highlight></codeline>
<codeline lineno="1200"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1201"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="1202"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>method</highlight></codeline>
<codeline lineno="1203"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1204"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>ret</highlight></codeline>
<codeline lineno="1205"><highlight class="comment">*<sp/><sp/><sp/><sp/>Type<sp/>of<sp/>the<sp/>return<sp/>value<sp/>of<sp/>the<sp/>method</highlight></codeline>
<codeline lineno="1206"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1207"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>args</highlight></codeline>
<codeline lineno="1208"><highlight class="comment">*<sp/><sp/><sp/><sp/>Array<sp/>of<sp/>pointers<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="1209"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1210"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="1211"><highlight class="comment">*<sp/><sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>of<sp/>args<sp/>array</highlight></codeline>
<codeline lineno="1212"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1213"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1214"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>value<sp/>containing<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="1215"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a1391d4d2e8f9dc919ecb6ce5ac00916f" kindref="member">metacallt_object</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="metacall__value_8h_1a09df370b94fa034a58dc8048e14ed34d" kindref="member">metacall_value_id</ref><sp/>ret,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1218"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1219"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1220"><highlight class="comment">*<sp/><sp/><sp/><sp/>Get<sp/>an<sp/>attribute<sp/>from<sp/>@obj<sp/>by<sp/>@key<sp/>name</highlight></codeline>
<codeline lineno="1221"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1222"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>obj</highlight></codeline>
<codeline lineno="1223"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>object</highlight></codeline>
<codeline lineno="1224"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1225"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>key</highlight></codeline>
<codeline lineno="1226"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>attribute<sp/>to<sp/>get</highlight></codeline>
<codeline lineno="1227"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1228"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1229"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>object<sp/>attribute<sp/>value<sp/>or<sp/>NULL<sp/>if<sp/>an<sp/>error<sp/>occurred</highlight></codeline>
<codeline lineno="1230"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1abf765af19df6abca9ef981ed56db6b92" kindref="member">metacall_object_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1233"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1234"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1235"><highlight class="comment">*<sp/><sp/><sp/><sp/>Set<sp/>an<sp/>attribute<sp/>to<sp/>@obj<sp/>by<sp/>@key<sp/>name</highlight></codeline>
<codeline lineno="1236"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1237"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>obj</highlight></codeline>
<codeline lineno="1238"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>object</highlight></codeline>
<codeline lineno="1239"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1240"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>key</highlight></codeline>
<codeline lineno="1241"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>attribute<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="1242"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1243"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>value</highlight></codeline>
<codeline lineno="1244"><highlight class="comment">*<sp/><sp/><sp/><sp/>Value<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="1245"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1246"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1247"><highlight class="comment">*<sp/><sp/><sp/><sp/>Non-zero<sp/>integer<sp/>if<sp/>an<sp/>error<sp/>ocurred</highlight></codeline>
<codeline lineno="1248"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1a567cbdd3c398e4bcfab8e07ff76de06b" kindref="member">metacall_object_set</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1251"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1252"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1253"><highlight class="comment">*<sp/><sp/><sp/><sp/>Provide<sp/>information<sp/>about<sp/>all<sp/>loaded<sp/>objects</highlight></codeline>
<codeline lineno="1254"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1255"><highlight class="comment">*<sp/><sp/>@param[out]<sp/>size</highlight></codeline>
<codeline lineno="1256"><highlight class="comment">*<sp/><sp/><sp/><sp/>Size<sp/>in<sp/>bytes<sp/>of<sp/>return<sp/>buffer</highlight></codeline>
<codeline lineno="1257"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1258"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>allocator</highlight></codeline>
<codeline lineno="1259"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>allocator<sp/>will<sp/>allocate<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="1260"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1261"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1262"><highlight class="comment">*<sp/><sp/><sp/><sp/>String<sp/>containing<sp/>introspection<sp/>information</highlight></codeline>
<codeline lineno="1263"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1ab9d6a8fa4d186f14741ef15015798eb0" kindref="member">metacall_inspect</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*allocator);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1266"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1267"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1268"><highlight class="comment">*<sp/><sp/><sp/><sp/>Convert<sp/>the<sp/>value<sp/>@v<sp/>to<sp/>serialized<sp/>string</highlight></codeline>
<codeline lineno="1269"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1270"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="1271"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>serial<sp/>to<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="1272"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1273"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>v</highlight></codeline>
<codeline lineno="1274"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="1275"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1276"><highlight class="comment">*<sp/><sp/>@param[out]<sp/>size</highlight></codeline>
<codeline lineno="1277"><highlight class="comment">*<sp/><sp/><sp/><sp/>Size<sp/>of<sp/>new<sp/>allocated<sp/>string</highlight></codeline>
<codeline lineno="1278"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1279"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>allocator</highlight></codeline>
<codeline lineno="1280"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>allocator<sp/>will<sp/>allocate<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="1281"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1282"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1283"><highlight class="comment">*<sp/><sp/><sp/><sp/>New<sp/>allocated<sp/>string<sp/>containing<sp/>stringified<sp/>value</highlight></codeline>
<codeline lineno="1284"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1acdcbeeeafdc83e9b69937265a0da53c3" kindref="member">metacall_serialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*allocator);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1287"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1288"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1289"><highlight class="comment">*<sp/><sp/><sp/><sp/>Convert<sp/>the<sp/>string<sp/>@buffer<sp/>to<sp/>value</highlight></codeline>
<codeline lineno="1290"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1291"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>name</highlight></codeline>
<codeline lineno="1292"><highlight class="comment">*<sp/><sp/><sp/><sp/>Name<sp/>of<sp/>the<sp/>serial<sp/>to<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="1293"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1294"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>buffer</highlight></codeline>
<codeline lineno="1295"><highlight class="comment">*<sp/><sp/><sp/><sp/>String<sp/>to<sp/>be<sp/>deserialized</highlight></codeline>
<codeline lineno="1296"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1297"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>size</highlight></codeline>
<codeline lineno="1298"><highlight class="comment">*<sp/><sp/><sp/><sp/>Size<sp/>of<sp/>string<sp/>@buffer</highlight></codeline>
<codeline lineno="1299"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1300"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>allocator</highlight></codeline>
<codeline lineno="1301"><highlight class="comment">*<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>allocator<sp/>will<sp/>allocate<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="1302"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1303"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1304"><highlight class="comment">*<sp/><sp/><sp/><sp/>New<sp/>allocated<sp/>value<sp/>representing<sp/>the<sp/>string<sp/>(must<sp/>be<sp/>freed)</highlight></codeline>
<codeline lineno="1305"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a0d45c99a4491e8bbad9d66aa8e719e54" kindref="member">metacall_deserialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*allocator);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1308"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1309"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1310"><highlight class="comment">*<sp/><sp/><sp/><sp/>Clear<sp/>handle<sp/>from<sp/>memory<sp/>and<sp/>unload<sp/>related<sp/>resources</highlight></codeline>
<codeline lineno="1311"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1312"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>handle</highlight></codeline>
<codeline lineno="1313"><highlight class="comment">*<sp/><sp/><sp/><sp/>Reference<sp/>to<sp/>the<sp/>handle<sp/>to<sp/>be<sp/>unloaded</highlight></codeline>
<codeline lineno="1314"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1315"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1316"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="1317"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1ae1f35c9c5cd2b375e8fb00b9d8c5890c" kindref="member">metacall_clear</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1320"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1321"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1322"><highlight class="comment">*<sp/><sp/><sp/><sp/>Destroy<sp/>MetaCall<sp/>library</highlight></codeline>
<codeline lineno="1323"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1324"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1325"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="1326"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall_8h_1aca8745a9f261bc3d37ee9156b991296f" kindref="member">metacall_destroy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1329"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1330"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="1331"><highlight class="comment">*<sp/><sp/><sp/><sp/>Provide<sp/>the<sp/>module<sp/>information</highlight></codeline>
<codeline lineno="1332"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1333"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="1334"><highlight class="comment">*<sp/><sp/><sp/><sp/>Static<sp/>string<sp/>containing<sp/>module<sp/>information</highlight></codeline>
<codeline lineno="1335"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="metacall_8h_1a1e8b06591a5564cfa4f1209e84ad5e78" kindref="member">metacall_print_info</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>METACALL_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall.h"/>
  </compounddef>
</doxygen>
