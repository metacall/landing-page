<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="metacall__fork_8h" kind="file" language="C++">
    <compoundname>metacall_fork.h</compoundname>
    <includes local="no">metacall/metacall_api.h</includes>
    <incdepgraph>
      <node id="2">
        <label>metacall/metacall_api.h</label>
      </node>
      <node id="1">
        <label>metacall_fork.h</label>
        <link refid="metacall__fork_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="metacall__fork_8h_1a08d637d91639b7d99f67ecb5bb4fe8f3" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* metacall_pre_fork_callback_ptr) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>metacall_pre_fork_callback_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h" line="62" column="9" bodyfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="metacall__fork_8h_1af7ebd3032b9a59f483098feb6055ca54" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* metacall_post_fork_callback_ptr) (metacall_pid, void *)</definition>
        <argsstring>)(metacall_pid, void *)</argsstring>
        <name>metacall_post_fork_callback_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h" line="63" column="9" bodyfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="metacall__fork_8h_1a2ddac237388f8543cfdf7343df7270ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_fork_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>metacall_fork_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize fork detours and allocate shared memory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h" line="74" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h" declline="74" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="metacall__fork_8h_1af3ee5698e71e05e892a64c2c0ba66d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API void</type>
        <definition>METACALL_API void metacall_fork</definition>
        <argsstring>(metacall_pre_fork_callback_ptr pre_callback, metacall_post_fork_callback_ptr post_callback)</argsstring>
        <name>metacall_fork</name>
        <param>
          <type><ref refid="metacall__fork_8h_1a08d637d91639b7d99f67ecb5bb4fe8f3" kindref="member">metacall_pre_fork_callback_ptr</ref></type>
          <declname>pre_callback</declname>
        </param>
        <param>
          <type><ref refid="metacall__fork_8h_1af7ebd3032b9a59f483098feb6055ca54" kindref="member">metacall_post_fork_callback_ptr</ref></type>
          <declname>post_callback</declname>
        </param>
        <briefdescription>
<para>Set fork hook callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pre_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to be called before fork detour is executed</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">post_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to be called after fork detour is executed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h" line="86" column="19" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h" declline="86" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="metacall__fork_8h_1ada8919e4e89d7933277c197b47be5271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>METACALL_API int</type>
        <definition>METACALL_API int metacall_fork_destroy</definition>
        <argsstring>(void)</argsstring>
        <name>metacall_fork_destroy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Unregister fork detours and destroy shared memory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Zero if success, different from zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h" line="95" column="18" declfile="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h" declline="95" declcolumn="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>MetaCall<sp/>Library<sp/>by<sp/>Parra<sp/>Studios</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>library<sp/>for<sp/>providing<sp/>a<sp/>foreign<sp/>function<sp/>interface<sp/>calls.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2016<sp/>-<sp/>2022<sp/>Vicente<sp/>Eduardo<sp/>Ferrer<sp/>Garcia<sp/>&lt;vic798@gmail.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>METACALL_FORK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>METACALL_FORK_H<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Headers<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;metacall/metacall_api.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__CYGWIN__)<sp/>||<sp/>defined(__CYGWIN32__)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__MINGW32__)<sp/>||<sp/>defined(__MINGW64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>--<sp/>Headers<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;process.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Type<sp/>Definitions<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>metacall_pid;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(unix)<sp/>||<sp/>defined(__unix__)<sp/>||<sp/>defined(__unix)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(linux)<sp/>||<sp/>defined(__linux__)<sp/>||<sp/>defined(__linux)<sp/>||<sp/>defined(__gnu_linux)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__CYGWIN__)<sp/>||<sp/>defined(__CYGWIN32__)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(__APPLE__)<sp/>&amp;&amp;<sp/>defined(__MACH__))<sp/>||<sp/>defined(__MACOSX__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>--<sp/>Headers<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Type<sp/>Definitions<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pid_t<sp/>metacall_pid;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>&quot;Unknown<sp/>metacall<sp/>fork<sp/>safety<sp/>platform&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="metacall__fork_8h_1a08d637d91639b7d99f67ecb5bb4fe8f3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="metacall__fork_8h_1a08d637d91639b7d99f67ecb5bb4fe8f3" kindref="member">metacall_pre_fork_callback_ptr</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="63" refid="metacall__fork_8h_1af7ebd3032b9a59f483098feb6055ca54" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="metacall__fork_8h_1af7ebd3032b9a59f483098feb6055ca54" kindref="member">metacall_post_fork_callback_ptr</ref>)(metacall_pid,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--<sp/>Methods<sp/>--<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="68"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="69"><highlight class="comment">*<sp/><sp/><sp/><sp/>Initialize<sp/>fork<sp/>detours<sp/>and<sp/>allocate<sp/>shared<sp/>memory</highlight></codeline>
<codeline lineno="70"><highlight class="comment">*</highlight></codeline>
<codeline lineno="71"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="72"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="73"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="metacall__fork_8h_1a2ddac237388f8543cfdf7343df7270ed" refkind="member"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall__fork_8h_1a2ddac237388f8543cfdf7343df7270ed" kindref="member">metacall_fork_initialize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="77"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="78"><highlight class="comment">*<sp/><sp/><sp/><sp/>Set<sp/>fork<sp/>hook<sp/>callback</highlight></codeline>
<codeline lineno="79"><highlight class="comment">*</highlight></codeline>
<codeline lineno="80"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>pre_callback</highlight></codeline>
<codeline lineno="81"><highlight class="comment">*<sp/><sp/><sp/><sp/>Callback<sp/>to<sp/>be<sp/>called<sp/>before<sp/>fork<sp/>detour<sp/>is<sp/>executed</highlight></codeline>
<codeline lineno="82"><highlight class="comment">*</highlight></codeline>
<codeline lineno="83"><highlight class="comment">*<sp/><sp/>@param[in]<sp/>post_callback</highlight></codeline>
<codeline lineno="84"><highlight class="comment">*<sp/><sp/><sp/><sp/>Callback<sp/>to<sp/>be<sp/>called<sp/>after<sp/>fork<sp/>detour<sp/>is<sp/>executed</highlight></codeline>
<codeline lineno="85"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="metacall__fork_8h_1af3ee5698e71e05e892a64c2c0ba66d3a" refkind="member"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="metacall__fork_8h_1af3ee5698e71e05e892a64c2c0ba66d3a" kindref="member">metacall_fork</ref>(<ref refid="metacall__fork_8h_1a08d637d91639b7d99f67ecb5bb4fe8f3" kindref="member">metacall_pre_fork_callback_ptr</ref><sp/>pre_callback,<sp/><ref refid="metacall__fork_8h_1af7ebd3032b9a59f483098feb6055ca54" kindref="member">metacall_post_fork_callback_ptr</ref><sp/>post_callback);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="89"><highlight class="comment">*<sp/><sp/>@brief</highlight></codeline>
<codeline lineno="90"><highlight class="comment">*<sp/><sp/><sp/><sp/>Unregister<sp/>fork<sp/>detours<sp/>and<sp/>destroy<sp/>shared<sp/>memory</highlight></codeline>
<codeline lineno="91"><highlight class="comment">*</highlight></codeline>
<codeline lineno="92"><highlight class="comment">*<sp/><sp/>@return</highlight></codeline>
<codeline lineno="93"><highlight class="comment">*<sp/><sp/><sp/><sp/>Zero<sp/>if<sp/>success,<sp/>different<sp/>from<sp/>zero<sp/>otherwise</highlight></codeline>
<codeline lineno="94"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="metacall__fork_8h_1ada8919e4e89d7933277c197b47be5271" refkind="member"><highlight class="normal">METACALL_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="metacall__fork_8h_1ada8919e4e89d7933277c197b47be5271" kindref="member">metacall_fork_destroy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>METACALL_FORK_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/landing-page/landing-page/core/source/metacall/include/metacall/metacall_fork.h"/>
  </compounddef>
</doxygen>
