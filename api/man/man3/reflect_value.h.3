.TH "reflect_value.h" 3 "Tue Jan 23 2024" "Version 0.7.5.34b28423138e" "MetaCall" \" -*- nroff -*-
.ad l
.nh
.SH NAME
reflect_value.h
.SH SYNOPSIS
.br
.PP
\fC#include <reflect/reflect_api\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBboolean\fP   unsigned char"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void * \fBvalue\fP"
.br
.ti -1c
.RI "typedef void(* \fBvalue_finalizer_cb\fP) (\fBvalue\fP, void *)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_alloc\fP (size_t bytes)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create\fP (const void *data, size_t bytes)"
.br
.ti -1c
.RI "REFLECT_API int \fBvalue_validate\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_copy\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API void \fBvalue_move\fP (\fBvalue\fP src, \fBvalue\fP dst)"
.br
.ti -1c
.RI "REFLECT_API size_t \fBvalue_size\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API void \fBvalue_ref_inc\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API void \fBvalue_ref_dec\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API void \fBvalue_finalizer\fP (\fBvalue\fP v, \fBvalue_finalizer_cb\fP finalizer, void *finalizer_data)"
.br
.ti -1c
.RI "REFLECT_API void * \fBvalue_data\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API void \fBvalue_to\fP (\fBvalue\fP v, void *data, size_t bytes)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from\fP (\fBvalue\fP v, const void *data, size_t bytes)"
.br
.ti -1c
.RI "REFLECT_API void \fBvalue_destroy\fP (\fBvalue\fP v)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define boolean   unsigned char"

.SH "Typedef Documentation"
.PP 
.SS "typedef void* \fBvalue\fP"

.SS "typedef void(* value_finalizer_cb) (\fBvalue\fP, void *)"

.SH "Function Documentation"
.PP 
.SS "REFLECT_API \fBvalue\fP value_alloc (size_t bytes)"

.PP
Reserve memory for a value with size @bytes\&. 
.PP
\fBParameters\fP
.RS 4
\fIbytes\fP Size in bytes to be allocated
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to uninitialized value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create (const void * data, size_t bytes)"

.PP
Create a value from @data with size @bytes\&. 
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Pointer to memory block
.br
\fIbytes\fP Size in bytes of the memory block @data
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API int value_validate (\fBvalue\fP v)"

.PP
Check if the value @v is valid or the memory is corrupted\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference of value to be checked
.RE
.PP
\fBReturns\fP
.RS 4
Zero if the value is valid, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_copy (\fBvalue\fP v)"

.PP
Copy a value from @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference of value to be copied
.RE
.PP
\fBReturns\fP
.RS 4
Reference to new value copied from @v 
.RE
.PP

.SS "REFLECT_API void value_move (\fBvalue\fP src, \fBvalue\fP dst)"

.PP
Copies the ownership from @src to @dst, including the finalizer, and resets the owner and finalizer of @src\&. 
.PP
\fBParameters\fP
.RS 4
\fIsrc\fP Source value which will lose the ownership
.br
\fIdst\fP Destination value which will recieve the ownership 
.RE
.PP

.SS "REFLECT_API size_t value_size (\fBvalue\fP v)"

.PP
Returns the size of the value\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Size in bytes of the value 
.RE
.PP

.SS "REFLECT_API void value_ref_inc (\fBvalue\fP v)"

.PP
Increment reference count of a value\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value 
.RE
.PP

.SS "REFLECT_API void value_ref_dec (\fBvalue\fP v)"

.PP
Decrement reference count of a value\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value 
.RE
.PP

.SS "REFLECT_API void value_finalizer (\fBvalue\fP v, \fBvalue_finalizer_cb\fP finalizer, void * finalizer_data)"

.PP
Set up the value finalizer, a callback that will be executed when the value life ends\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIfinalizer\fP Reference to the callback
.br
\fIfinalizer_data\fP Reference to additional data to be passed when the finalizer is called 
.RE
.PP

.SS "REFLECT_API void* value_data (\fBvalue\fP v)"

.PP
Get pointer reference to value data\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to writeable memory block of value @v 
.RE
.PP

.SS "REFLECT_API void value_to (\fBvalue\fP v, void * data, size_t bytes)"

.PP
Convert value @v to memory block @data\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIdata\fP Pointer to memory block where value will be stored
.br
\fIbytes\fP Size in bytes of the memory block @data 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from (\fBvalue\fP v, const void * data, size_t bytes)"

.PP
Assing memory block @data to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIdata\fP Pointer to memory block to be copied into @v
.br
\fIbytes\fP Size in bytes of the memory block @data
.RE
.PP
\fBReturns\fP
.RS 4
Value with @data of size @bytes assigned to it 
.RE
.PP

.SS "REFLECT_API void value_destroy (\fBvalue\fP v)"

.PP
Destroy a value from scope stack\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for MetaCall from the source code\&.
