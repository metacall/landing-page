.TH "reflect_value_type.h" 3 "Mon Mar 25 2024" "Version 0.7.11.12f31bd02db2" "MetaCall" \" -*- nroff -*-
.ad l
.nh
.SH NAME
reflect_value_type.h
.SH SYNOPSIS
.br
.PP
\fC#include <reflect/reflect_api\&.h>\fP
.br
\fC#include <reflect/reflect_class\&.h>\fP
.br
\fC#include <reflect/reflect_exception\&.h>\fP
.br
\fC#include <reflect/reflect_function\&.h>\fP
.br
\fC#include <reflect/reflect_future\&.h>\fP
.br
\fC#include <reflect/reflect_object\&.h>\fP
.br
\fC#include <reflect/reflect_throwable\&.h>\fP
.br
\fC#include <reflect/reflect_type_id\&.h>\fP
.br
\fC#include <reflect/reflect_value\&.h>\fP
.br
\fC#include <reflect/reflect_value_type_cast\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_type_create\fP (const void *data, size_t bytes, \fBtype_id\fP id)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_type_copy\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API size_t \fBvalue_type_size\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API size_t \fBvalue_type_count\fP (void *v)"
.br
.ti -1c
.RI "REFLECT_API \fBtype_id\fP \fBvalue_type_id\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_bool\fP (\fBboolean\fP b)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_char\fP (char c)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_short\fP (short s)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_int\fP (int i)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_long\fP (long l)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_float\fP (float f)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_double\fP (double d)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_string\fP (const char *str, size_t length)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_buffer\fP (const void *buffer, size_t size)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_array\fP (const \fBvalue\fP *values, size_t size)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_map\fP (const \fBvalue\fP *tuples, size_t size)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_ptr\fP (const void *ptr)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_future\fP (\fBfuture\fP f)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_function\fP (\fBfunction\fP f)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_function_closure\fP (\fBfunction\fP f, void *c)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_null\fP (void)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_class\fP (\fBklass\fP c)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_object\fP (\fBobject\fP o)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_exception\fP (\fBexception\fP ex)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_create_throwable\fP (\fBthrowable\fP th)"
.br
.ti -1c
.RI "REFLECT_API \fBboolean\fP \fBvalue_to_bool\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API char \fBvalue_to_char\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API short \fBvalue_to_short\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API int \fBvalue_to_int\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API long \fBvalue_to_long\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API float \fBvalue_to_float\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API double \fBvalue_to_double\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API char * \fBvalue_to_string\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API void * \fBvalue_to_buffer\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP * \fBvalue_to_array\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP * \fBvalue_to_map\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API void * \fBvalue_to_ptr\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBfuture\fP \fBvalue_to_future\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBfunction\fP \fBvalue_to_function\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API void * \fBvalue_to_null\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBklass\fP \fBvalue_to_class\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBobject\fP \fBvalue_to_object\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBexception\fP \fBvalue_to_exception\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBthrowable\fP \fBvalue_to_throwable\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_bool\fP (\fBvalue\fP v, \fBboolean\fP b)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_char\fP (\fBvalue\fP v, char c)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_short\fP (\fBvalue\fP v, short s)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_int\fP (\fBvalue\fP v, int i)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_long\fP (\fBvalue\fP v, long l)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_float\fP (\fBvalue\fP v, float f)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_double\fP (\fBvalue\fP v, double d)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_string\fP (\fBvalue\fP v, const char *str, size_t length)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_buffer\fP (\fBvalue\fP v, const void *buffer, size_t size)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_array\fP (\fBvalue\fP v, const \fBvalue\fP *values, size_t size)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_map\fP (\fBvalue\fP v, const \fBvalue\fP *tuples, size_t size)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_ptr\fP (\fBvalue\fP v, const void *ptr)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_future\fP (\fBvalue\fP v, \fBfuture\fP f)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_function\fP (\fBvalue\fP v, \fBfunction\fP f)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_null\fP (\fBvalue\fP v)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_class\fP (\fBvalue\fP v, \fBklass\fP c)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_object\fP (\fBvalue\fP v, \fBobject\fP o)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_exception\fP (\fBvalue\fP v, \fBexception\fP ex)"
.br
.ti -1c
.RI "REFLECT_API \fBvalue\fP \fBvalue_from_throwable\fP (\fBvalue\fP v, \fBthrowable\fP th)"
.br
.ti -1c
.RI "REFLECT_API void \fBvalue_type_destroy\fP (\fBvalue\fP v)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "REFLECT_API \fBvalue\fP value_type_create (const void * data, size_t bytes, \fBtype_id\fP id)"

.PP
Create a value type from @data with size @bytes and typeid @id\&. 
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Pointer to memory block
.br
\fIbytes\fP Size in bytes of the memory block @data
.br
\fIid\fP Type of memory block @data
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_type_copy (\fBvalue\fP v)"

.PP
Make a deep copy of value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value is going to be copied
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to a deep copy of new value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API size_t value_type_size (\fBvalue\fP v)"

.PP
Returns the size of the value type\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Size in bytes of the value type 
.RE
.PP

.SS "REFLECT_API size_t value_type_count (void * v)"

.PP
Returns the amount of values this value contains\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Number of values @v represents 
.RE
.PP

.SS "REFLECT_API \fBtype_id\fP value_type_id (\fBvalue\fP v)"

.PP
Provide type id of value\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Return type id assigned to value 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_bool (\fBboolean\fP b)"

.PP
Create a value from boolean \fB\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIb\fP Boolean will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_char (char c)"

.PP
Create a value from char \fC\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIc\fP Character will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_short (short s)"

.PP
Create a value from short @s\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP Short will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_int (int i)"

.PP
Create a value from integer @i\&. 
.PP
\fBParameters\fP
.RS 4
\fIi\fP Integer will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_long (long l)"

.PP
Create a value from long @l\&. 
.PP
\fBParameters\fP
.RS 4
\fIl\fP Long integer will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_float (float f)"

.PP
Create a value from single precision floating point number @f\&. 
.PP
\fBParameters\fP
.RS 4
\fIf\fP Float will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_double (double d)"

.PP
Create a value from double precision floating point number @d\&. 
.PP
\fBParameters\fP
.RS 4
\fId\fP Double will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_string (const char * str, size_t length)"

.PP
Create a value from a C string @str\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP Constant string will be copied into value (needs to be null terminated)
.br
\fIlength\fP Length of the constant string
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_buffer (const void * buffer, size_t size)"

.PP
Create a value buffer from array @buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIarr\fP Constant memory block will be copied into value buffer
.br
\fIsize\fP Size in bytes of data contained in the array
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_array (const \fBvalue\fP * values, size_t size)"

.PP
Create a value array from array of values @values\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalues\fP Constant array of values will be copied into value array
.br
\fIsize\fP Number of elements contained in the array
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_map (const \fBvalue\fP * tuples, size_t size)"

.PP
Create a value map from array of tuples @map\&. 
.PP
\fBParameters\fP
.RS 4
\fItuples\fP Constant array of tuples will be copied into value map
.br
\fIsize\fP Number of elements contained in the map
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_ptr (const void * ptr)"

.PP
Create a value from pointer @ptr\&. 
.PP
\fBParameters\fP
.RS 4
\fIptr\fP Pointer to constant data will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_future (\fBfuture\fP f)"

.PP
Create a value from future @f\&. 
.PP
\fBParameters\fP
.RS 4
\fIf\fP Pointer to future will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_function (\fBfunction\fP f)"

.PP
Create a value from function @f\&. 
.PP
\fBParameters\fP
.RS 4
\fIf\fP Pointer to function will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_function_closure (\fBfunction\fP f, void * c)"

.PP
Create a value from function @f binding a closure \fCto\fP it\&. 
.PP
\fBParameters\fP
.RS 4
\fIf\fP Pointer to constant data will be copied into value
.br
\fIc\fP Pointer to closure that will be binded into function @f
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_null (void)"

.PP
Create a value of type null\&. 
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_class (\fBklass\fP c)"

.PP
Create a value from function \fC\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIc\fP Pointer to class will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_object (\fBobject\fP o)"

.PP
Create a value from object @o\&. 
.PP
\fBParameters\fP
.RS 4
\fIo\fP Pointer to object will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_exception (\fBexception\fP ex)"

.PP
Create a value from exception @ex\&. 
.PP
\fBParameters\fP
.RS 4
\fIex\fP Pointer to exception will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_create_throwable (\fBthrowable\fP th)"

.PP
Create a value from throwable @th\&. 
.PP
\fBParameters\fP
.RS 4
\fIth\fP Pointer to throwable will be copied into value
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to value if success, null otherwhise 
.RE
.PP

.SS "REFLECT_API \fBboolean\fP value_to_bool (\fBvalue\fP v)"

.PP
Convert value @v to boolean\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to boolean 
.RE
.PP

.SS "REFLECT_API char value_to_char (\fBvalue\fP v)"

.PP
Convert value @v to char\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to char 
.RE
.PP

.SS "REFLECT_API short value_to_short (\fBvalue\fP v)"

.PP
Convert value @v to short\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to short 
.RE
.PP

.SS "REFLECT_API int value_to_int (\fBvalue\fP v)"

.PP
Convert value @v to integer\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to integer 
.RE
.PP

.SS "REFLECT_API long value_to_long (\fBvalue\fP v)"

.PP
Convert value @v to long integer\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to long integer 
.RE
.PP

.SS "REFLECT_API float value_to_float (\fBvalue\fP v)"

.PP
Convert value @v to single precision floating point\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to float 
.RE
.PP

.SS "REFLECT_API double value_to_double (\fBvalue\fP v)"

.PP
Convert value @v to double precision floating point\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to dobule 
.RE
.PP

.SS "REFLECT_API char* value_to_string (\fBvalue\fP v)"

.PP
Convert value @v to string\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to a C string (null terminated) 
.RE
.PP

.SS "REFLECT_API void* value_to_buffer (\fBvalue\fP v)"

.PP
Convert value @v to buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to memory block 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP* value_to_array (\fBvalue\fP v)"

.PP
Convert value @v to array of values\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to array of values 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP* value_to_map (\fBvalue\fP v)"

.PP
Convert value @v to map\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to map (array of tuples (array of values)) 
.RE
.PP

.SS "REFLECT_API void* value_to_ptr (\fBvalue\fP v)"

.PP
Convert value @v to pointer\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to pointer 
.RE
.PP

.SS "REFLECT_API \fBfuture\fP value_to_future (\fBvalue\fP v)"

.PP
Convert value @v to future\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to future 
.RE
.PP

.SS "REFLECT_API \fBfunction\fP value_to_function (\fBvalue\fP v)"

.PP
Convert value @v to function\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to function 
.RE
.PP

.SS "REFLECT_API void* value_to_null (\fBvalue\fP v)"

.PP
Convert value @v to null\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to null 
.RE
.PP

.SS "REFLECT_API \fBklass\fP value_to_class (\fBvalue\fP v)"

.PP
Convert value @v to class\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to class 
.RE
.PP

.SS "REFLECT_API \fBobject\fP value_to_object (\fBvalue\fP v)"

.PP
Convert value @v to object\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to object 
.RE
.PP

.SS "REFLECT_API \fBexception\fP value_to_exception (\fBvalue\fP v)"

.PP
Convert value @v to exception\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to exception 
.RE
.PP

.SS "REFLECT_API \fBthrowable\fP value_to_throwable (\fBvalue\fP v)"

.PP
Convert value @v to throwable\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value converted to throwable 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_bool (\fBvalue\fP v, \fBboolean\fP b)"

.PP
Assign boolean \fBto\fP value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIb\fP Boolean to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with boolean \fBassigned\fP to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_char (\fBvalue\fP v, char c)"

.PP
Assign character \fCto\fP value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIc\fP Character to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with char \fCassigned\fP to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_short (\fBvalue\fP v, short s)"

.PP
Assign short @s to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIs\fP Short to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with short @s assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_int (\fBvalue\fP v, int i)"

.PP
Assign integer @i to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIi\fP Integer to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with integer @i assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_long (\fBvalue\fP v, long l)"

.PP
Assign long integer @l to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIl\fP Long integer to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with long @l assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_float (\fBvalue\fP v, float f)"

.PP
Assign single precision floating point @f to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIf\fP Float to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with float @f assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_double (\fBvalue\fP v, double d)"

.PP
Assign double precision floating point @d to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fId\fP Double to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with double @d assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_string (\fBvalue\fP v, const char * str, size_t length)"

.PP
Assign string @str to value @v, truncates to @v size if it is smaller than @length + 1\&. It does not add null terminator if truncated\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIstr\fP Constant string to be assigned to value @v (it needs to be null terminated)
.br
\fIlength\fP Length of the constant string @str
.RE
.PP
\fBReturns\fP
.RS 4
Value with string @str assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_buffer (\fBvalue\fP v, const void * buffer, size_t size)"

.PP
Assign array @buffer to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIbuffer\fP Constant byte array to be assigned to value @v
.br
\fIsize\fP Size in bytes of data contained in @buffer
.RE
.PP
\fBReturns\fP
.RS 4
Value with array @buffer assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_array (\fBvalue\fP v, const \fBvalue\fP * values, size_t size)"

.PP
Assign array of values @values to value array @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIvalues\fP Constant array of values to be assigned to value array @v
.br
\fIsize\fP Number of values contained in constant array @values
.RE
.PP
\fBReturns\fP
.RS 4
Value with array of values @values assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_map (\fBvalue\fP v, const \fBvalue\fP * tuples, size_t size)"

.PP
Assign array of values @values to value map @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fItuples\fP Constant array of tuples to be assigned to value map @v
.br
\fIsize\fP Number of values contained in constant array @tuples
.RE
.PP
\fBReturns\fP
.RS 4
Value with array of tuples @tuples assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_ptr (\fBvalue\fP v, const void * ptr)"

.PP
Assign pointer reference @ptr to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIptr\fP Pointer to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with pointer @ptr assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_future (\fBvalue\fP v, \fBfuture\fP f)"

.PP
Assign future reference @f to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIf\fP Future to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with future @future assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_function (\fBvalue\fP v, \fBfunction\fP f)"

.PP
Assign function reference @f to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIf\fP Function to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with function @f assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_null (\fBvalue\fP v)"

.PP
Assign null to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.RE
.PP
\fBReturns\fP
.RS 4
Value with null assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_class (\fBvalue\fP v, \fBklass\fP c)"

.PP
Assign class reference \fCto\fP value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIc\fP Class to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with class \fCassigned\fP to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_object (\fBvalue\fP v, \fBobject\fP o)"

.PP
Assign object reference @o to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIo\fP Object to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with object @o assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_exception (\fBvalue\fP v, \fBexception\fP ex)"

.PP
Assign exception reference @ex to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIex\fP Exception to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with exception @ex assigned to it 
.RE
.PP

.SS "REFLECT_API \fBvalue\fP value_from_throwable (\fBvalue\fP v, \fBthrowable\fP th)"

.PP
Assign throwable reference @ex to value @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value
.br
\fIth\fP Throwable to be assigned to value @v
.RE
.PP
\fBReturns\fP
.RS 4
Value with throwable @th assigned to it 
.RE
.PP

.SS "REFLECT_API void value_type_destroy (\fBvalue\fP v)"

.PP
Destroy recursively a value type @v\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Reference to the value 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for MetaCall from the source code\&.
